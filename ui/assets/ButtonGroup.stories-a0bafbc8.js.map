{"version":3,"file":"ButtonGroup.stories-a0bafbc8.js","sources":["../../../src/components/ButtonGroup/ButtonGroup.styles.js","../../../src/components/ButtonGroup/ButtonGroup.types.js","../../../src/components/ButtonGroup/ButtonGroup.jsx"],"sourcesContent":["import { styled, css } from 'styled-components';\n\nimport {\n  BUTTON_SIZE_SMALL,\n  BUTTON_SIZE_BASE,\n} from '#components/Button/Button.constants';\nimport Icon from '#components/Icon';\n\nimport * as device from '#theme/devices';\n\nimport ChevronRightSVG from '#icons/chevron-right-solid-16.svg';\n\nexport const Wrapper = styled.div`\n  display: block;\n`;\n\nexport const List = styled.ul`\n  --gap: 16px;\n  --cols: 2;\n  --max-width: 100%;\n  --total-gap: calc(var(--gap) * (var(--cols) - 1));\n  --item-width: calc((100% - var(--total-gap)) / var(--cols));\n  display: flex;\n  max-width: var(--max-width);\n  flex-flow: row wrap;\n  justify-content: center;\n  gap: var(--gap);\n  padding: 0;\n  margin: 0 auto;\n  list-style: none;\n\n  > li {\n    width: var(--item-width);\n    flex: 0 1 var(--item-width);\n    padding: 0;\n    margin: 0;\n  }\n\n  @media ${device.tablet} {\n    --cols: 3;\n    --max-width: 100%;\n\n    ${({ $itemCount }) =>\n      // if there are 4 or 2 items, we want to make the list 2 columns wide\n      $itemCount === 4 || $itemCount === 2\n        ? css`\n            --cols: 2;\n            --max-width: calc(100% / 3 * 2);\n          `\n        : ''}\n  }\n`;\n\n/*\n  we have to wrap each individual word in a span to allow us to truncate that\n  word if the button is not wide enough. We have to do this at the word level as\n  the buttons can support 2 lines of text. This then means that we have to\n  emulate the spacing between words with column gap between the spans.\n*/\nexport const Title = styled.div`\n  display: flex;\n  min-width: 0;\n  flex-flow: row wrap;\n  column-gap: ${({ theme }) => theme.dimension.text.spaceWidthEm}em;\n  line-height: inherit;\n\n  span {\n    display: inline-block;\n    overflow: hidden;\n    max-width: 100%;\n    text-overflow: ellipsis;\n  }\n`;\n\nexport const ItemIcon = styled(Icon).attrs({\n  size: BUTTON_SIZE_BASE,\n})``;\n\nexport const Chevron = styled(Icon).attrs({\n  svg: ChevronRightSVG,\n  size: BUTTON_SIZE_SMALL,\n})`\n  display: block;\n  margin-left: auto;\n  color: currentColor;\n`;\n\nexport const Item = styled.a`\n  --color: ${({ theme }) => theme.color.ink.base};\n  --bg: ${({ theme }) => theme.color.actionBold.base};\n  display: flex;\n  height: ${({ theme }) => theme.dimension.btn.height}px;\n  box-sizing: border-box;\n  flex-flow: row nowrap;\n  align-items: center;\n  gap: ${({ theme }) => theme.dimension.btn.iconSpacing}px;\n  padding: 0 ${({ theme }) => theme.spacing.x1}px;\n  border: 1px solid ${({ theme }) => theme.color.divider.light};\n  border-radius: ${({ theme }) => theme.dimension.btn.borderRadius}px;\n  background-color: var(--bg);\n  color: var(--color);\n  font: ${({ theme }) => theme.textStyle.buttonGroup.base};\n  transition: ${({ theme }) => theme.transition.button};\n\n  &:hover,\n  &:active {\n    --color: ${({ theme }) => theme.color.ink.inverted};\n    --bg: ${({ theme }) => theme.color.actionBold.alt};\n    border-color: var(--bg);\n    color: var(--color); /* necessary to override a:hover */\n  }\n\n  ${ItemIcon}, ${Chevron} {\n    flex-shrink: 0;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nexport const ButtonGroupItemTypes = {\n  title: PropTypes.string.isRequired,\n  /**\n   * @todo switch this to a CustomPropType.url.isRequired once we have a way of\n   * sharing them between flow-web and UI lib\n   */\n  url: PropTypes.string.isRequired,\n  icon: PropTypes.func.isRequired,\n};\n\nexport const ButtonGroupTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape(ButtonGroupItemTypes).isRequired)\n    .isRequired,\n};\n","import { Fragment } from 'react';\n\nimport {\n  Wrapper,\n  List,\n  Item,\n  Title,\n  ItemIcon,\n  Chevron,\n} from './ButtonGroup.styles';\nimport { ButtonGroupTypes } from './ButtonGroup.types';\n\nconst ButtonGroup = ({ items }) => {\n  if (!Array.isArray(items) || !items?.length) {\n    return null;\n  }\n\n  return (\n    <Wrapper>\n      <List $itemCount={items.length}>\n        {items.map(({ title, url, icon, target }, i) => (\n          <li key={`item-${i}`}>\n            <Item href={url} target={target}>\n              <ItemIcon svg={icon} />\n              <Title>\n                {title.split(' ').map((part, j) => (\n                  <Fragment key={`title-${j}`}>\n                    <span>{part} </span>\n                  </Fragment>\n                ))}\n              </Title>\n              <Chevron />\n            </Item>\n          </li>\n        ))}\n      </List>\n    </Wrapper>\n  );\n};\n\nButtonGroup.propTypes = ButtonGroupTypes;\n\nexport default ButtonGroup;\n"],"names":["Wrapper","styled","div","withConfig","componentId","List","ul","device","$itemCount","css","Title","theme","dimension","text","spaceWidthEm","ItemIcon","Icon","attrs","size","BUTTON_SIZE_BASE","Chevron","svg","ChevronRightSVG","BUTTON_SIZE_SMALL","Item","a","color","ink","base","actionBold","btn","height","iconSpacing","spacing","x1","divider","light","borderRadius","textStyle","buttonGroup","transition","button","inverted","alt","ButtonGroupItemTypes","title","PropTypes","string","isRequired","url","icon","func","ButtonGroupTypes","items","arrayOf","shape","ButtonGroup","Array","isArray","length","jsx","map","target","i","split","part","j","Fragment","propTypes","ButtonGroup$1"],"mappings":"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"}