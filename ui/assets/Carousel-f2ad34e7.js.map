{"version":3,"file":"Carousel-f2ad34e7.js","sources":["../../../src/utils/chunk.ts","../../../src/utils/clamp.ts","../../../src/components/Carousel/Carousel.constants.js","../../../src/components/Carousel/Carousel.styles.js","../../../src/components/Carousel/Carousel.types.js","../../../src/components/Carousel/hooks/helpers/isCheckbox.ts","../../../src/components/Carousel/hooks/scrollActiveElIntoView.ts","../../../src/components/Carousel/hooks/useScrollToFocusedElement.ts","../../../src/components/Carousel/hooks/useVisibleIndexes.js","../../../src/components/Carousel/Carousel.jsx"],"sourcesContent":["/**\n * Splits an array of items into chunks of size n.\n *\n * @param items - The array of items to split.\n * @param n - The size of each chunk.\n * @returns An array of arrays, where each inner array contains up to n items.\n * @throws An error if items is not an array, n is not a number, or n is not a positive integer.\n *\n * @example\n * chunk([1, 2, 3, 4, 5], 2) // [[1, 2], [3, 4], [5]]\n * chunk([1, 2, 3, 4, 5], 3) // [[1, 2, 3], [4, 5]]\n */\nconst chunk = <T>(items: T[], n: number): T[][] => {\n  const notArray = !Array.isArray(items);\n  const notNumber = typeof n !== 'number';\n  const notPositiveInteger = n <= 0 || n % 1 !== 0;\n\n  if (notArray) throw new Error('`items` should be an array');\n  if (notNumber) throw new Error('`n` should be a number');\n  if (notPositiveInteger) throw new Error('`n` should be a positive integer');\n\n  const result: T[][] = [];\n  const size = Math.ceil(items.length / n);\n\n  for (let i = 0; i < size; i++) {\n    result.push(items.slice(i * n, (i + 1) * n));\n  }\n\n  return result;\n};\n\nexport default chunk;\n","/**\n * Clamps a number between a min and a max\n * @param min the lower extreme\n * @param max the upper extreme\n * @param value the number to be clamped\n * @returns the clamped number\n */\nconst clamp = (min: number, max: number, value: number): number =>\n  Math.min(Math.max(value, min), max);\n\nexport default clamp;\n","export const INITIAL_INDEX = 0;\nexport const INCREMENT = 1;\n","import { styled } from 'styled-components';\n\nimport { hideScrollbar } from '#theme/mixins';\n\nexport const Boundary = styled.div``;\n\nexport const Slider = styled.ul`\n  display: flex;\n  width: 100%;\n  gap: var(--carousel-gap, 0);\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  -webkit-overflow-scrolling: touch;\n  overflow-x: auto;\n  overflow-y: visible;\n  scroll-behavior: smooth;\n  scroll-snap-type: x mandatory;\n  ${hideScrollbar}\n`;\n\nexport const Nav = styled.nav``;\n\nexport const Group = styled.li`\n  display: flex;\n  scroll-snap-align: start;\n`;\n","import PropTypes from 'prop-types';\n\nexport default {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  initialIndex: PropTypes.number,\n  ButtonNext: PropTypes.elementType,\n  ButtonPrev: PropTypes.elementType,\n};\n","export function isCheckbox(event: Event) {\n  const { target } = event;\n\n  if (target) {\n    const type = (target as HTMLInputElement).type;\n\n    if (type && type === 'checkbox') {\n      return true;\n    }\n  }\n\n  return false;\n}\n","export function scrollActiveElIntoView(\n  behavior: ScrollBehavior,\n  block: ScrollLogicalPosition,\n  inline: ScrollLogicalPosition,\n) {\n  document.activeElement?.scrollIntoView({\n    behavior,\n    block,\n    inline,\n  });\n}\n","import { useEffect } from 'react';\n\nimport { isCheckbox } from './helpers/isCheckbox';\nimport { scrollActiveElIntoView } from './scrollActiveElIntoView';\n\n/**\n * A custom hook which scrolls the focused element into view inside a given\n * container.\n *\n * @param {Object} options\n * @param {React.RefObject} options.root - the ref of the root element\n * @param {string} options.behavior - the scroll behavior\n * @param {string} options.block - the scroll block\n * @param {string} options.inline - the scroll inline\n * @todo there is sometimes a jump in the page when the buttons are clicked. Not\n * sure if this is the cause.\n */\n\ntype Props = {\n  root: React.RefObject<HTMLElement>;\n  behavior: ScrollBehavior;\n  block: ScrollLogicalPosition;\n  inline: ScrollLogicalPosition;\n};\n\nconst useScrollToFocusedElement = ({\n  root,\n  behavior = 'smooth',\n  block = 'nearest',\n  inline = 'center',\n}: Props) =>\n  useEffect(() => {\n    const container = root.current;\n\n    function handleFocused(this: HTMLElement, event: FocusEvent) {\n      if (isCheckbox(event)) {\n        return;\n      }\n\n      const focusWithin = container?.contains(document.activeElement);\n\n      if (focusWithin) {\n        scrollActiveElIntoView(behavior, block, inline);\n      }\n    }\n\n    container?.addEventListener('focusin', handleFocused);\n\n    return () => {\n      container?.removeEventListener('focusin', handleFocused);\n    };\n  }, [root, behavior, block, inline]);\n\nexport default useScrollToFocusedElement;\n","import { useEffect, useRef, useState } from 'react';\n\n/**\n * useVisibleIndexes\n * This is a custom hook that uses the IntersectionObserver API to determine\n * whether refs are visible or not.\n *\n * @param {Object} options\n * @param {Array<React.RefObject>} options.nodes - an array of refs to observe\n * @param {React.RefObject} options.root - the ref of the root element\n *\n * @returns {Array<boolean>} visibleIndexes - an array of booleans that indicate whether the items are visible or not\n */\nconst useVisibleIndexes = ({ nodes, root }) => {\n  const observer = useRef(null);\n  const [visibleIndexes, setVisibleIndexes] = useState(nodes.map(() => false));\n\n  // @todo how can both of these be true at the same time?\n  const [isAtStart, setIsAtStart] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  useEffect(() => {\n    const handleIntersect = (entries) =>\n      entries.forEach((entry) => {\n        const { target, isIntersecting, intersectionRatio } = entry;\n        const entryIndex = nodes.findIndex((node) => node === target);\n        const isCompletelyVisible = isIntersecting && intersectionRatio > 0.9;\n        const isPartlyVisible = isIntersecting && intersectionRatio > 0.1;\n        const isFirst = entryIndex === 0;\n        const isLast = entryIndex === nodes.length - 1;\n\n        setVisibleIndexes((prev) => {\n          const next = [...prev];\n          next[entryIndex] = isPartlyVisible;\n          return next;\n        });\n\n        isFirst && setIsAtStart(isCompletelyVisible);\n        isLast && setIsAtEnd(isCompletelyVisible);\n      });\n\n    observer.current = new IntersectionObserver(handleIntersect, {\n      threshold: [0.1, 0.5, 0.9],\n      root: root.current,\n      rootMargin: '-1px',\n    });\n\n    nodes.forEach((ref) => {\n      observer.current?.observe(ref);\n    });\n\n    return () => observer.current?.disconnect();\n  }, [root, nodes]);\n\n  return [visibleIndexes, isAtStart, isAtEnd];\n};\n\nexport default useVisibleIndexes;\n","import { useCallback, useRef, useEffect } from 'react';\n\nimport chunk from '#utils/chunk';\nimport clamp from '#utils/clamp';\n\nimport { INITIAL_INDEX, INCREMENT } from './Carousel.constants';\nimport { Boundary, Slider, Nav, Group } from './Carousel.styles';\nimport propTypes from './Carousel.types';\nimport useScrollToFocusedElement from './hooks/useScrollToFocusedElement';\nimport useVisibleIndexes from './hooks/useVisibleIndexes';\n\nconst Carousel = ({\n  className,\n  items,\n  ButtonNext,\n  ButtonPrev,\n  renderSlide,\n  ...props\n}) => {\n  const { initialIndex = INITIAL_INDEX, increment = INCREMENT } = props;\n  const itemsArray = items;\n  const groupsOfItems = chunk(itemsArray, increment);\n  const sliderRef = useRef();\n  const groupRefs = useRef([]);\n  const childrenRefs = useRef([]);\n  const min = 0;\n  const max = items.length - 1;\n  const [visibleIndexes, isAtStart, isAtEnd] = useVisibleIndexes({\n    nodes: groupRefs.current,\n    root: sliderRef,\n  });\n  const showNav = !(isAtStart && isAtEnd);\n\n  const navigate = useCallback(\n    (newIndex = 0) => {\n      const index = clamp(min, max, newIndex);\n      const top = 0;\n      const left = groupRefs?.current?.at(index)?.offsetLeft;\n      const behavior = 'smooth';\n\n      /*\n       * `scrollIntoView()` is not consistent across browsers.\n       * Chrome doesn't scroll to the left edge of the item when the\n       * slider is already aligned to the viewport.\n       */\n      sliderRef?.current?.scrollTo({\n        top,\n        left,\n        behavior,\n      });\n    },\n    [sliderRef, min, max],\n  );\n\n  useEffect(() => {\n    navigate(initialIndex);\n  }, [initialIndex, navigate]);\n\n  useScrollToFocusedElement({\n    root: sliderRef,\n    behavior: 'smooth',\n    block: 'nearest',\n    inline: 'center',\n  });\n\n  const navigateCarousel = useCallback(\n    (adjust) => {\n      const index = visibleIndexes.findIndex((x) => x);\n      const newIndex = clamp(min, max, index + adjust);\n      navigate(newIndex);\n    },\n    [visibleIndexes, max, navigate],\n  );\n\n  const handlePrevClick = () => navigateCarousel(-1);\n  const handleNextClick = () => navigateCarousel(1);\n\n  return (\n    <Boundary className={className}>\n      <Slider ref={sliderRef}>\n        {groupsOfItems.map((group, groupIndex) => (\n          <Group\n            key={groupIndex}\n            ref={(ref) => (groupRefs.current[groupIndex] = ref)}\n          >\n            {group.map((item, i) =>\n              renderSlide({\n                slideIndex: i,\n                itemIndex: groupIndex * increment + i,\n                item,\n                isVisible: !!visibleIndexes[groupIndex],\n                ref: (ref) => {\n                  childrenRefs.current[i] = ref;\n                },\n              }),\n            )}\n          </Group>\n        ))}\n      </Slider>\n      {showNav && (\n        <Nav>\n          <ButtonPrev disabled={isAtStart} onClick={handlePrevClick} />\n          <ButtonNext disabled={isAtEnd} onClick={handleNextClick} />\n        </Nav>\n      )}\n    </Boundary>\n  );\n};\nCarousel.displayName = 'Carousel';\nCarousel.propTypes = propTypes;\n\nexport default Carousel;\n"],"names":["chunk","__name","items","n","notArray","Array","isArray","notNumber","notPositiveInteger","Error","result","size","Math","ceil","length","i","push","slice","clamp","min","max","value","INITIAL_INDEX","INCREMENT","Boundary","styled","div","withConfig","componentId","Slider","ul","hideScrollbar","Nav","nav","Group","li","propTypes","children","PropTypes","node","className","string","initialIndex","number","ButtonNext","elementType","ButtonPrev","isCheckbox","event","target","type","scrollActiveElIntoView","behavior","block","inline","document","activeElement","scrollIntoView","useScrollToFocusedElement","root","useEffect","container","current","handleFocused","contains","addEventListener","removeEventListener","useVisibleIndexes","nodes","observer","useRef","visibleIndexes","setVisibleIndexes","useState","map","isAtStart","setIsAtStart","isAtEnd","setIsAtEnd","handleIntersect","entries","forEach","entry","isIntersecting","intersectionRatio","entryIndex","findIndex","isCompletelyVisible","isPartlyVisible","isFirst","isLast","prev","next","IntersectionObserver","threshold","rootMargin","ref","observe","disconnect","Carousel","renderSlide","props","increment","groupsOfItems","sliderRef","groupRefs","childrenRefs","showNav","navigate","useCallback","newIndex","index","top","left","at","offsetLeft","scrollTo","navigateCarousel","adjust","x","handlePrevClick","handleNextClick","jsxs","jsx","group","groupIndex","item","slideIndex","itemIndex","isVisible","displayName"],"mappings":"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"}