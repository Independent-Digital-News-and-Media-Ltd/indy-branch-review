{"version":3,"file":"Checkbox-ba3bf9ea.js","sources":["../../../src/components/Form/Input/Checkbox/Checkbox.constants.ts","../../../src/components/Form/Input/Checkbox/Checkbox.styles.ts","../../../src/components/Form/Input/Checkbox/Checkbox.tsx"],"sourcesContent":["import { CheckboxSize } from './Checkbox.types';\n\nexport const CHECKBOX_SIZE_SMALL = 'small' as CheckboxSize;\nexport const CHECKBOX_SIZE_BASE = 'base' as CheckboxSize;\nexport const CHECKBOX_SIZE_LARGE = 'large' as CheckboxSize;\n","import { HTMLProps } from 'react';\nimport { styled } from 'styled-components';\n\nimport Icon from '#components/Icon';\nimport ScreenReaderOnly from '#components/ScreenReaderOnly';\n\nimport { WrapperProps, LabelProps } from './Checkbox.types';\n\n// In order to consistently override default appearance we have\n// to hide the default input\nexport const HiddenInput = styled(ScreenReaderOnly).attrs({\n  as: 'input',\n})`` as React.FC<HTMLProps<HTMLInputElement>>;\n\nexport const Label = styled.label<LabelProps>`\n  display: flex;\n  align-items: center;\n  gap: var(--check-margin);\n  color: var(--color);\n  cursor: ${({ $disabled }) => ($disabled ? 'default' : 'pointer')};\n  font: ${({ theme }) => theme.textStyle.formInput.error};\n  user-select: none;\n`;\n\nexport const TickIcon = styled(Icon)`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nexport const CheckableBox = styled.div`\n  width: var(--width);\n  height: var(--height);\n  box-sizing: border-box;\n  flex-shrink: 0;\n  background: var(--check-background-color);\n\n  /* we use box-shadow \"inset\" so we can render the border inside\n   the div, matching the designs */\n  box-shadow: 0px 0px 0px 1px var(--check-border-color) inset;\n  color: var(--color);\n\n  svg {\n    display: none;\n  }\n`;\n\nexport const Wrapper = styled.div<WrapperProps>`\n  --width: var(--height);\n  --height: ${({ $size }) => {\n    switch ($size) {\n      case 'small':\n        return '16px';\n      case 'base':\n        return '24px';\n      case 'large':\n        return '32px';\n    }\n  }};\n  --check-margin: ${({ $size, theme }) => {\n    switch ($size) {\n      case 'large':\n        return `${theme.spacing.x1_5}px`;\n      default:\n        return `${theme.spacing.x1}px`;\n    }\n  }};\n  --color: ${({ theme }) => theme.color.ink.base};\n  --check-border-color: ${({ theme }) => theme.color.divider.black};\n  --check-background-color: ${({ theme }) => theme.color.ink.inverted};\n\n  position: relative;\n  padding: ${({ theme }) => theme.spacing.x1_5}px 0;\n  background-color: var(--background-color);\n  color: var(--color);\n\n  ${({ theme, $disabled }) => {\n    if ($disabled) {\n      return `\n        --color: ${theme.color.semiotic.disabled};\n        --check-border-color: ${theme.color.semiotic.disabled};\n        --check-background-color: ${theme.color.canvas.secondary};\n      `;\n    }\n  }}\n\n  &:focus,\n  &:hover,\n  &:active {\n    color: var(--color);\n  }\n\n  &:focus-within ${CheckableBox} {\n    outline: 2px solid ${({ theme }) => theme.color.semiotic.info};\n  }\n\n  :checked + ${Label} svg {\n    display: initial;\n  }\n`;\n","import React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { SvgrProps } from '#types/svgr.d';\n\nimport Icon from '#components/Icon';\n\nimport Tick16Svg from '#assets/icons/tick-solid-16.svg';\nimport Tick24Svg from '#assets/icons/tick-solid-24.svg';\nimport Tick32Svg from '#assets/icons/tick-solid-32.svg';\n\nimport { CHECKBOX_SIZE_BASE } from './Checkbox.constants';\nimport { CheckableBox, HiddenInput, Label, Wrapper } from './Checkbox.styles';\nimport { CheckboxProps, CheckboxSize } from './Checkbox.types';\n\nconst TickIconMap: Record<CheckboxSize, SvgrProps> = {\n  small: Tick16Svg,\n  base: Tick24Svg,\n  large: Tick32Svg,\n};\n\nconst Checkbox: React.FC<CheckboxProps> = ({\n  id,\n  className,\n  controlled = true,\n  disabled = false,\n  label,\n  size = CHECKBOX_SIZE_BASE,\n  ...inputProps\n}) => {\n  const form = useFormContext();\n\n  if (controlled && !form) {\n    throw new Error(\n      `Checkbox should be wrapped by a FormProvider from @indy/ui/Form, unless the controlled={false} prop is set`,\n    );\n  }\n\n  const inputRegistration = controlled ? form.register(id) : {};\n\n  return (\n    <Wrapper className={className} $size={size} $disabled={disabled}>\n      <HiddenInput\n        type=\"checkbox\"\n        id={id}\n        name={id}\n        disabled={disabled}\n        {...inputProps}\n        {...inputRegistration}\n      />\n      <Label htmlFor={id} $disabled={disabled}>\n        <CheckableBox>\n          <Icon size={size} svg={TickIconMap[size]} />\n        </CheckableBox>\n        <div>{label}</div>\n      </Label>\n    </Wrapper>\n  );\n};\n\nexport default Checkbox;\n"],"names":["CHECKBOX_SIZE_BASE","HiddenInput","styled","ScreenReaderOnly","attrs","as","withConfig","componentId","React","Label","label","$disabled","theme","textStyle","formInput","error","Icon","CheckableBox","div","Wrapper","$size","spacing","x1_5","x1","color","ink","base","divider","black","inverted","semiotic","disabled","canvas","secondary","info","TickIconMap","Tick16Svg","Tick24Svg","Checkbox","__name","id","className","form","useFormContext","controlled","inputRegistration","jsxs","size","jsx","inputProps","Checkbox$1"],"mappings":"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"}