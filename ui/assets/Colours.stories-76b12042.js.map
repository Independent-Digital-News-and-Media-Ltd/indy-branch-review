{"version":3,"file":"Colours.stories-76b12042.js","sources":["../../../src/utils/flatten.ts","../../../src/pages/components/Semantics.jsx","../../../src/pages/principles/Colours.stories.mdx"],"sourcesContent":["export type TFlattenInputObject = {\n  [key: string]:\n    | number\n    | boolean\n    | string\n    | TFlattenInputObject\n    | (number | boolean | string)[];\n};\n\nconst flatten = (\n  obj: TFlattenInputObject,\n  arrayModifier: (\n    path: string,\n    value: (number | boolean | string)[],\n  ) => { [key: string]: string } = (path, value) => {\n    const newPath = `${path}!list`;\n    const newValue = value.join(',');\n    return { [newPath]: newValue };\n  },\n): { [key: string]: string | boolean | number } => {\n  const dot = (\n    obj: TFlattenInputObject,\n    target: { [key: string]: number | boolean | string } = {},\n    path = '',\n  ) => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newPath = path.length > 0 ? `${path}.${key}` : key;\n\n      if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const modified = arrayModifier(newPath, value);\n          Object.assign(target, modified);\n        } else {\n          dot(value, target, newPath);\n        }\n      } else {\n        target[newPath] = value;\n      }\n    }\n\n    return target;\n  };\n\n  return dot(obj);\n};\n\nexport default flatten;\n","import PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { styled } from 'styled-components';\n\nimport flatten from '#utils/flatten';\n\n/** @todo find a way of parsing jsDocs on the fly */\nimport colorsDocs from '../../../dist/doc.colors.json';\n\nimport CopyButton from './CopyButton';\nimport Swatch from './Swatch';\nimport {\n  Headings,\n  Group,\n  GroupHeader,\n  GroupTitle,\n  GroupTable,\n  RowHeading,\n  Cell,\n  CellContents,\n  Description,\n} from './Table';\n\n/**\n * The JSDocs are extracted as part of the build and we pull them in here in\n * order that we can add them as colour descriptions\n */\nconst tokenDescriptions = colorsDocs.reduce(\n  (acc, m) => ({ ...acc, [m.id]: m.description }),\n  {},\n);\n\n/**\n *\n * @param {string} token The location of the color within the theme colour\n * object\n * @param {string} base The name of the base theme that contains all of the\n * colour descriptions\n * @returns {string} The description pertaining to that token\n */\nfunction getTokenDescription(token, base = 'base') {\n  const paragraphString = tokenDescriptions[`${base}.${token}`] || '';\n  const paragraphContent = paragraphString.replaceAll(/<\\/?p>/g, '');\n\n  return paragraphContent;\n}\n\nconst CopyToken = styled(CopyButton)`\n  display: inline-flex;\n  vertical-align: middle;\n`;\n\nconst Semantics = ({ palette, order }) => {\n  function sortByDefinedOrder(themeA, themeB) {\n    const iA = order.indexOf(themeA);\n    const iB = order.indexOf(themeB);\n\n    if (iA < 1 || iA > iB) {\n      return 1;\n    }\n\n    if (iA < iB) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  const themeNames = Object.keys(palette);\n\n  /*\n    Build a list of themes and sort according to the order provided, otherwise\n    alphabetically\n  */\n  const themes =\n    Array.isArray(order) && order.length\n      ? themeNames.sort(sortByDefinedOrder)\n      : themeNames.sort();\n\n  /**\n   * Build an iterable unique permutation of all possible colour tokens e.g.\n   * [ primary, action.base, action.alt, ... ]\n   */\n  const tokens = Object.values(palette).reduce((acc, colors) => {\n    const themeColorOverrides = flatten(colors);\n    const flattened = Object.keys(themeColorOverrides).filter(\n      (token) => !acc.includes(token),\n    );\n\n    return [...acc, ...flattened];\n  }, []);\n\n  /**\n   * Flatten each theme's semantic colour palette into a map of tokens to their\n   * colour value e.g\n   * {\n   *   base: {\n   *     action.base: '#ec1a2e',\n   *     action.alt: '#a51220',\n   *     ...\n   *   },\n   *   premium: {\n   *     action.base: '#337e81',\n   *     action.alt: '#24585a',\n   *   }\n   *   ...\n   * }\n   */\n  const paletteTokens = Object.entries(palette).reduce(\n    (acc, [theme, colors]) => ({\n      ...acc,\n      [theme]: flatten(colors),\n    }),\n    {},\n  );\n\n  /**\n   * The group name will always be the first element in the dot token. Extract\n   * these into an iterable form so that we can then group the tokens.\n   */\n  const groupNames = tokens.reduce((acc, token) => {\n    const group = token.split('.').at(0);\n\n    if (!acc.includes(group)) {\n      acc.push(group);\n    }\n\n    return acc;\n  }, []);\n\n  /**\n   * Loop over the group names so that we can extract all of the tokens and\n   * colours within e.g.\n   * {\n   *   group: 'action',\n   *   values: [\n   *     {\n   *       token: 'action.base',\n   *       group: 'action,\n   *       variant: 'base',\n   *       description: 'e.g. links, button bg',\n   *       values: [`#ec1a2e`,`#337e81`,`#19d37a`,`#2dccd3`]\n   *     },\n   *     {\n   *       token: 'action.alt',\n   *       group: 'action',\n   *       variant: 'alt',\n   *       description: 'e.g. hovered buttons/links',\n   *       values: [`#a51220`,`#24585a`,`#129455`,`#111f9f`]\n   *     },\n   *     ...\n   *   ]\n   * }\n   */\n  const groups = groupNames.map((group) => {\n    const groupTokens = tokens.filter(\n      (token) => token.split('.').at(0) === group,\n    );\n\n    const tokenThemes = groupTokens.map((token) => ({\n      token,\n      group,\n      variant: token.split('.').at(-1),\n      description: getTokenDescription(token),\n      values: themes.map((theme) => paletteTokens[theme][token] || null),\n    }));\n\n    return {\n      group,\n      values: tokenThemes,\n    };\n  }, []);\n\n  return (\n    <>\n      <Headings colCount={themes.length}>\n        <thead>\n          <tr>\n            <th></th>\n            {themes.map((theme, i) => (\n              <th key={`theme-${i}`}>{theme}</th>\n            ))}\n          </tr>\n        </thead>\n      </Headings>\n      {groups.map(({ group, values }, i) => (\n        <Group key={`group-${i}`}>\n          <GroupHeader>\n            <GroupTitle>{group}</GroupTitle>\n          </GroupHeader>\n          <GroupTable colCount={themes.length}>\n            <tbody>\n              {values.map(({ token, description, values }, j) => (\n                <tr key={`variant-${j}`}>\n                  <RowHeading>\n                    {token}{' '}\n                    <CopyToken\n                      value={`\\${({ theme }) => theme.color.${token}}`}\n                    />{' '}\n                    {description && <Description>{description}</Description>}{' '}\n                  </RowHeading>\n                  {values.map((hex, k) => (\n                    <Cell key={`theme-${k}`}>\n                      <CellContents>\n                        <Swatch fill={hex} width={24} height={24} />\n                      </CellContents>\n                    </Cell>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </GroupTable>\n        </Group>\n      ))}\n    </>\n  );\n};\n\nSemantics.propTypes = {\n  palette: PropTypes.object.isRequired,\n  order: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default Semantics;\n","import { Meta } from '@storybook/addon-docs';\n\nimport * as themes from '#theme/themes';\n\nimport Semantics from '../components/Semantics';\n\n<Meta\n  title=\"Principles/Colours\"\n  parameters={{\n    wrapper: 'section',\n  }}\n/>\n\n<Semantics\n  palette={Object.entries(themes).reduce(\n    (acc, [name, theme]) => ({\n      ...acc,\n      [name]: theme.color,\n    }),\n    {},\n  )}\n  order={['base', 'premium', 'climate', 'sgi']}\n/>\n"],"names":["flatten","obj","arrayModifier","path","value","newPath","newValue","join","dot","target","key","length","Array","isArray","modified","assign","tokenDescriptions","colorsDocs","reduce","acc","m","id","description","getTokenDescription","token","base","paragraphContent","replaceAll","CopyToken","styled","CopyButton","withConfig","componentId","Semantics","palette","order","sortByDefinedOrder","themeA","themeB","iA","indexOf","iB","themeNames","Object","keys","themes","sort","tokens","values","colors","themeColorOverrides","flattened","filter","includes","paletteTokens","entries","theme","groups","group","split","at","push","map","tokenThemes","variant","jsxs","Fragment","jsx","Headings","i","Group","GroupHeader","GroupTitle","GroupTable","j","RowHeading","Description","hex","k","Cell","CellContents","Swatch","propTypes","PropTypes","object","isRequired","arrayOf","string","MDXContent","props","MDXLayout","_provideComponents","_jsx","_createMdxContent","_jsxs","_Fragment","Meta","name","__name","__page","componentMeta","__namedExportsOrder"],"mappings":"gnCASA,MAAMA,EAAUA,EAAAA,CACdC,EACAC,EAGiCA,CAACC,EAAMC,IAAU,CAChD,MAAMC,EAAW,GAAEF,SACbG,EAAWF,EAAMG,KAAK,GAAG,EACxB,MAAA,CAAE,CAACF,CAAO,EAAGC,CAAAA,CACtB,IACiD,CACjD,MAAME,EAAMA,EAAAA,CACVP,EACAQ,EAAuD,CAAC,EACxDN,EAAO,KACJ,CACH,UAAWO,KAAOT,EAAK,CACfG,MAAAA,EAAQH,EAAIS,CAAG,EACfL,EAAUF,EAAKQ,OAAS,EAAK,GAAER,KAAQO,IAAQA,EAEjD,GAAA,OAAON,GAAU,SACfQ,GAAAA,MAAMC,QAAQT,CAAK,EAAG,CAClBU,MAAAA,EAAWZ,EAAcG,EAASD,CAAK,EACtCW,OAAAA,OAAON,EAAQK,CAAQ,OAE1BV,EAAAA,EAAOK,EAAQJ,CAAO,OAG5BI,EAAOJ,CAAO,EAAID,EAIfK,OAAAA,CAAAA,EArBGD,OAwBZ,OAAOA,EAAIP,CAAG,CAChB,EApCgBD;63TCkBhBgB,EAAAC,EAAAC,OACA,CAAAC,EAAAC,KAAA,CAAA,GAAAD,EAAA,CAAAC,EAAAC,EAAA,EAAAD,EAAAE,WAAA,GACA,CACA,CAAA,EAUA,SAAAC,EAAAC,EAAAC,EAAA,OAAA,CAIAC,OAHAV,EAAA,GAAAS,KAAAD,GAAA,GAAA,IACAG,WAAA,UAAA,EAAA,CAGA,CALAJ,EAAAA,EAAAA,uBAOA,MAAAK,EAAAC,EAAAC,CAAA,EAAAC,WAAA,CAAAC,YAAA,cAAA,CAGA,EAAA,CAAA,4CAAA,CAAA,EAEAC,EAAAA,EAAAA,CAAA,CAAAC,QAAAA,EAAAC,MAAAA,CAAA,IAAA,CACAC,SAAAA,EAAAC,EAAAC,EAAA,CACAC,MAAAA,EAAAJ,EAAAK,QAAAH,CAAA,EACAI,EAAAN,EAAAK,QAAAF,CAAA,EAEAC,OAAAA,EAAA,GAAAA,EAAAE,EACA,EAGAF,EAAAE,EACA,GAGA,CACA,CAbAL,EAAAA,EAAAA,sBAeAM,MAAAA,EAAAC,OAAAC,KAAAV,CAAA,EAMAW,EACAjC,MAAAC,QAAAsB,CAAA,GAAAA,EAAAxB,OACA+B,EAAAI,KAAAV,CAAA,EACAM,EAAAI,KAAA,EAMAC,EAAAJ,OAAAK,OAAAd,CAAA,EAAAhB,OAAA,CAAAC,EAAA8B,IAAA,CACAC,MAAAA,EAAAlD,EAAAiD,CAAA,EACAE,EAAAR,OAAAC,KAAAM,CAAA,EAAAE,OACA5B,GAAA,CAAAL,EAAAkC,SAAA7B,CAAA,CACA,EAEA,MAAA,CAAA,GAAAL,EAAA,GAAAgC,CAAA,CACA,EAAA,CAAA,CAAA,EAkBAG,EAAAX,OAAAY,QAAArB,CAAA,EAAAhB,OACA,CAAAC,EAAA,CAAAqC,EAAAP,CAAA,KAAA,CACA,GAAA9B,EACA,CAAAqC,CAAA,EAAAxD,EAAAiD,CAAA,CAAA,GAEA,CACA,CAAA,EAwCAQ,EAlCAV,EAAA7B,OAAA,CAAAC,EAAAK,IAAA,CACA,MAAAkC,EAAAlC,EAAAmC,MAAA,GAAA,EAAAC,GAAA,CAAA,EAEA,OAAAzC,EAAAkC,SAAAK,CAAA,GACAvC,EAAA0C,KAAAH,CAAA,EAGAvC,CACA,EAAA,CAAA,CAAA,EA0BA2C,IAAAJ,GAAA,CAKAK,MAAAA,EAJAhB,EAAAK,OACA5B,GAAAA,EAAAmC,MAAA,GAAA,EAAAC,GAAA,CAAA,IAAAF,CACA,EAEAI,IAAAtC,IAAA,CACAA,MAAAA,EACAkC,MAAAA,EACAM,QAAAxC,EAAAmC,MAAA,GAAA,EAAAC,GAAA,EAAA,EACAtC,YAAAC,EAAAC,CAAA,EACAwB,OAAAH,EAAAiB,IAAAN,GAAAF,EAAAE,CAAA,EAAAhC,CAAA,GAAA,IAAA,CACA,EAAA,EAEA,MAAA,CACAkC,MAAAA,EACAV,OAAAe,CAAAA,CAEA,EAAA,CAAA,CAAA,EAEA,OAEAE,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAAA,IAAAC,GAAA,SAAAvB,EAAAlC,OACA,SAAAwD,MAAA,QAAA,CACA,gBAAA,KACA,CAAA,SAAA,CAAAA,EAAA,IAAA,KAAA,EAAA,EACAtB,EAAAiB,IAAA,CAAAN,EAAAa,UACA,KAAAb,CAAAA,SAAAA,CAAAA,EAAA,SAAAa,GAAA,CACA,CAAA,CACA,CAAA,CACA,CAAA,EACA,EACAZ,EAAAK,IAAA,CAAA,CAAAJ,MAAAA,EAAAV,OAAAA,CAAA,EAAAqB,IACAJ,EAAAA,KAAAK,EACA,CAAA,SAAA,CAAAH,MAAAI,EACA,CAAA,SAAAJ,EAAA,IAAAK,EAAAd,CAAAA,SAAAA,CAAA,CAAA,EACA,EACAS,EAAAA,IAAAM,GAAA,SAAA5B,EAAAlC,OACA,SAAAwD,EAAA,IAAA,QAAA,CACAnB,SAAAc,EAAAA,IAAA,CAAA,CAAAtC,MAAAA,EAAAF,YAAAA,EAAA0B,OAAAA,CAAA,EAAA0B,IACAT,EAAAA,KAAA,KACA,CAAA,SAAA,CAAAA,OAAAU,EACAnD,CAAAA,SAAAA,CAAAA,EAAA,IACA2C,EAAA,IAAAvC,EAAA,CACA,MAAA,iCAAAJ,KACA,EAAA,IACAF,GAAA6C,EAAAA,IAAAS,EAAA,CAAAtD,SAAAA,CAAA,CAAA,EAAA,GAAA,EACA,EACA0B,EAAAc,IAAA,CAAAe,EAAAC,IACAX,EAAAA,IAAAY,EAAA,CACA,eAAAC,EACA,CAAA,SAAAb,EAAAA,IAAAc,GAAA,KAAAJ,EAAA,MAAA,GAAA,OAAA,GAAA,CACA,CAAA,CAAA,EAHA,SAAAC,GAIA,CACA,CAAA,CAAA,EAdA,WAAAJ,GAeA,CACA,CACA,CAAA,EACA,CAzBA,CAAA,EAAA,SAAAL,GA0BA,CACA,CACA,CAAA,CAAA,CAEA,EApKApC,aAsKAA,EAAAiD,UAAA,CACAhD,QAAAiD,EAAAC,OAAAC,WACAlD,MAAAgD,EAAAG,QAAAH,EAAAI,MAAA,CACA,sNCrNA,SAASC,EAAWC,EAAQ,GAAI,CAC9B,KAAM,CACJ,QAASC,CACb,EAAM,OAAO,OAAO,CAAE,EAAEC,EAAkB,EAAIF,EAAM,UAAU,EAC5D,OAAOC,EAAyBE,EAAAA,IAAKF,EAAW,CAAE,GAAGD,EACnD,SAAuBG,EAAAA,IAAKC,EAAmB,EAAE,CACrD,CAAG,EAAIA,EAAiB,EAEtB,SAASA,GAAoB,CAC3B,OAAoBC,EAAAA,KAAMC,EAAAA,SAAW,CACnC,SAAU,CAAcH,EAAI,IAACI,EAAM,CACjC,MAAO,qBACP,WAAY,CACV,QAAS,SACV,CACT,CAAO,EAAG;AAAA,EAAmBJ,EAAI,IAAC3D,EAAW,CACrC,QAAS,OAAO,QAAQY,CAAM,EAAE,OAAO,CAAC1B,EAAK,CAAC8E,EAAMzC,CAAK,KAAO,CAAE,GAAGrC,EACnE,CAAC8E,CAAI,EAAGzC,EAAM,KACf,GAAG,CAAA,CAAE,EACN,MAAO,CAAC,OAAQ,UAAW,UAAW,KAAK,CACnD,CAAO,CAAC,CACR,CAAK,CACF,CACH,CAvBS0C,EAAAV,EAAA,cA2BG,MAACW,EAASD,EAAA,IAAM,CAC1B,MAAM,IAAI,MAAM,iBAAiB,CACnC,EAFsB,UAGtBC,EAAO,WAAa,CAClB,SAAU,EACZ,EACK,MAACC,EAAgB,CACpB,MAAO,qBACP,WAAY,CACV,QAAS,SACV,EACD,KAAM,CAAC,aAAa,EACpB,eAAgB,CAAC,QAAQ,CAC3B,EACAA,EAAc,WAAaA,EAAc,YAAc,GACvDA,EAAc,WAAW,KAAO,CAAE,GAAIA,EAAc,WAAW,MAAQ,GACrE,KAAMZ,CACR,EAC4B,MAAAa,GAAA,CAAA,QAAA"}