{"version":3,"file":"ControlledPopupTip-04ebf293.js","sources":["../../../src/components/PopupTip/ControlledPopupTip.tsx"],"sourcesContent":["import { useLayoutEffect, FC, useState, useRef } from 'react';\n\nimport { icon } from '../../theme/dimensions';\nimport { SIZE_SMALL } from '../Icon/Icon.constants';\n\nimport { GAP, ARROW_HEIGHT, ARROW_WIDTH } from './PopupTip.constants';\nimport {\n  getBB,\n  calculateTriggerClass,\n  calculatePosition,\n} from './PopupTip.helpers';\nimport { StyledIcon, Wrapper, Trigger, Body } from './PopupTip.styles';\nimport { Position, ControlledPopupTipProps } from './PopupTip.types';\n\nimport infoSVG from '#icons/info-outline-16.svg';\n\n/* color of trigger inherited from containing html */\n\nexport const ControlledPopupTip: FC<ControlledPopupTipProps> = ({\n  children,\n  isOpen,\n  svg = infoSVG,\n  id,\n  size = SIZE_SMALL,\n  className,\n}) => {\n  const [position, setPosition] = useState<Position>({ left: 0, top: 0 });\n  const [orientation, setOrientation] = useState('below');\n\n  const triggerRef = useRef(null);\n  const bodyRef = useRef(null);\n\n  const triggerWidth = icon[size].width;\n\n  useLayoutEffect(() => {\n    if (isOpen) {\n      const triggerRect = getBB(triggerRef);\n      const bodyRect = getBB(bodyRef);\n      const viewportWidth = document.documentElement.clientWidth;\n      const viewportHeight = document.documentElement.clientHeight;\n\n      const [left, top, orientation] = calculatePosition(\n        triggerRect,\n        bodyRect,\n        viewportWidth,\n        viewportHeight,\n      );\n\n      setPosition({ left, top });\n      setOrientation(orientation);\n    }\n  }, [isOpen]);\n\n  const triggerClass = calculateTriggerClass(isOpen, orientation);\n\n  return (\n    <Wrapper className={className}>\n      <Trigger\n        className={triggerClass}\n        ref={triggerRef}\n        $gap={GAP}\n        $triggerwidth={triggerWidth}\n        $arrowheight={ARROW_HEIGHT}\n        $arrowwidth={ARROW_WIDTH}\n      >\n        <StyledIcon svg={svg} size={size} />\n      </Trigger>\n      {isOpen && (\n        <Body\n          id={id}\n          ref={bodyRef}\n          style={{\n            left: position.left,\n            top: position.top,\n          }}\n        >\n          {children}\n        </Body>\n      )}\n    </Wrapper>\n  );\n};\n"],"names":["ControlledPopupTip","__name","children","isOpen","infoSVG","id","SIZE_SMALL","position","setPosition","useState","orientation","setOrientation","triggerRef","useRef","bodyRef","triggerWidth","icon","size","useLayoutEffect","triggerRect","getBB","bodyRect","viewportWidth","viewportHeight","left","top","orientation2","calculatePosition","triggerClass","calculateTriggerClass","jsxs","Wrapper","className","jsx","Trigger","GAP","ARROW_HEIGHT","ARROW_WIDTH","StyledIcon","svg","Body"],"mappings":"8ZAkBO,MAAAA,EAAAC,EAAA,CAAA,CAAyD,SAAAC,EAC9DA,OAAAA,EACAC,IAAAA,EAAAA,EACMC,GAAAA,EACNC,KAAAA,EAAAA,EACOC,UAAAA,CAET,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,WAAA,CAAmD,KAAA,EAAQ,IAAA,CAAQ,CAAA,EACnE,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAA,OAAA,EAEAG,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,IAAA,EAEAE,EAAAC,EAAAC,CAAA,EAAA,MAEAC,EAAAA,gBAAAA,IAAAA,CACE,GAAAf,EAAA,CACE,MAAAgB,EAAAC,EAAAR,CAAA,EACAS,EAAAD,EAAAN,CAAA,EACAQ,EAAA,SAAA,gBAAA,YACAC,EAAA,SAAA,gBAAA,aAEA,CAAAC,EAAAC,EAAAC,CAAA,EAAAC,EAAAR,EAAAE,EAAAC,EAAAC,CAAA,EAOAf,EAAAA,CAAY,KAAAgB,EAAEA,IAAAA,CAAMC,CAAAA,EACpBd,EAAAA,CAAAA,EACF,EAAA,CAAAR,CAAA,CAAA,EAGF,MAAAyB,EAAAC,EAAA1B,EAAAO,CAAA,EAEA,OAAAoB,OAAAC,EAAA,CAAA,UAAAC,EAAA,SAAA,CAEIC,MAAAC,EAAA,CAAA,UAAAN,EAAA,IAAAhB,EAAA,KAAAuB,EAAA,cAAApB,EAAA,aAAAqB,EAAA,YAAAC,EAAA,SAAAJ,EAAAA,IAAAK,EAAA,CAAA,IAAAC,EAAA,KAAAtB,CAAA,CAAA,EAAA,EASAd,GAAA8B,EAAA,IAAAO,EAAA,CAAA,GAAAnC,EAAA,IAAAS,EAAA,MAAA,CAKW,KAAAP,EAAA,KACUiB,IAAAA,EAAAA,GACDC,EAAAA,SAAAA,CAAAA,CAAAA,CAIlB,CAAA,CAAA,CAIR,EA/DO"}