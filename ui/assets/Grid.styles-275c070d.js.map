{"version":3,"file":"Grid.styles-275c070d.js","sources":["../../../src/components/Layout/Grid/Grid.styles.tsx"],"sourcesContent":["import { styled, css } from 'styled-components';\n\nimport { InlineContainer } from '#components/RichText';\n\nimport {\n  COLUMNS,\n  GRID,\n  DEVICES,\n  GUTTER,\n  MEDIA,\n  ALLEY,\n  CSS_GRID,\n  CSS_COLUMNS,\n  CSS_GUTTER,\n  CSS_OFFSET,\n  CSS_SPAN,\n  CSS_COLUMN_WIDTH,\n  CSS_OVERHANG,\n  CSS_ALLEY,\n} from './Grid.constants';\nimport { GridProps, RowProps, ColumnProps, OffGridProps } from './Grid.types';\n\n/**\n * This is used to make the props transient, effectively filtering out props\n * that are not valid html attributes. The reason this is being done here is to\n * save having to add dollar signs to them out in the wild.\n * @see {@link https://styled-components.com/docs/api#shouldforwardprop}\n */\nfunction blockDeviceProps(prop: string) {\n  return !['span', 'offset', 'align'].includes(prop);\n}\n\n/**\n * Use the <OffGrid /> component to create a full-bleed container that spans the\n * full width of the grid. This must only be used within long-form content.\n *\n * This assumes that any offset applied to the parent <Column /> is equal to the\n * effective offset on the right hand side e.g. if the grid is 12 columns wide\n * and the column is offset by 1 then the total span of the column will be 10.\n */\nexport const OffGrid = styled(InlineContainer).withConfig({\n  shouldForwardProp: blockDeviceProps,\n})<OffGridProps>`\n  /* distance between the edge of the Column and the edge of the Grid */\n  ${CSS_OVERHANG}: calc(\n    (var(${CSS_COLUMN_WIDTH}) * var(${CSS_OFFSET}, 0)) + var(${CSS_GUTTER})\n  );\n\n  width: var(${CSS_GRID});\n  margin-right: calc(var(${CSS_OVERHANG}) * -1);\n  margin-left: calc(var(${CSS_OVERHANG}) * -1);\n  clear: both;\n\n  ${({ span, align }) =>\n    DEVICES.map((device) => {\n      const media = MEDIA[device];\n      const deviceSpan = span?.[device];\n      const styles = css``;\n\n      if (typeof deviceSpan !== 'number') {\n        return null;\n      }\n\n      switch (align) {\n        case 'left':\n          styles.push(\n            ...css`\n              margin-right: var(${CSS_ALLEY});\n              float: left;\n            `,\n          );\n          break;\n        case 'right':\n          styles.push(\n            ...css`\n              margin-left: var(${CSS_ALLEY});\n              float: right;\n            `,\n          );\n          break;\n      }\n\n      return css`\n        @media ${media} {\n          ${styles}\n          width: calc(\n            (${deviceSpan} * var(${CSS_COLUMN_WIDTH}) + var(${CSS_OVERHANG}) - var(${CSS_GUTTER}))\n          );\n        }\n      `;\n    })}\n`;\n\nexport const Column = styled.div.withConfig({\n  shouldForwardProp: blockDeviceProps,\n})<ColumnProps>`\n  display: flex;\n  width: 0;\n  max-width: 100%;\n  box-sizing: border-box;\n  flex: 1 0 auto;\n  flex-direction: column;\n  padding: 0 calc(var(${CSS_GUTTER}) / 2);\n\n  ${({ span, offset }) =>\n    DEVICES.map((device) => {\n      const media = MEDIA[device];\n      const deviceSpan = span?.[device];\n      const deviceOffset = offset?.[device];\n      const styles = css``;\n\n      if (typeof deviceSpan === 'number') {\n        styles.push(\n          ...css`\n            ${CSS_SPAN}: ${deviceSpan};\n            --max-width: calc(${deviceSpan} / var(${CSS_COLUMNS}) * 100%);\n            max-width: var(--max-width);\n            flex: 1 1 var(--max-width);\n          `,\n        );\n      }\n\n      if (typeof deviceOffset === 'number') {\n        styles.push(\n          ...css`\n            ${CSS_OFFSET}: ${deviceOffset};\n            margin-left: calc(${deviceOffset} / var(${CSS_COLUMNS}) * 100%);\n          `,\n        );\n      }\n\n      if (styles.length) {\n        return css`\n          @media ${media} {\n            ${styles}\n          }\n        `;\n      }\n\n      return null;\n    })}\n`;\n\nexport const Row = styled.div.withConfig({\n  shouldForwardProp: blockDeviceProps,\n})<RowProps>`\n  display: flex;\n  box-sizing: border-box;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  margin: 0 calc(var(${CSS_GUTTER}) / -2);\n`;\n\nexport const Grid = styled.div.withConfig({\n  shouldForwardProp: blockDeviceProps,\n})<GridProps>`\n  ${CSS_GUTTER}: ${GUTTER}px;\n  ${CSS_ALLEY}: ${ALLEY.mobile}px;\n  ${CSS_COLUMNS}: ${COLUMNS.mobile};\n  ${CSS_GRID}: ${GRID.mobile};\n  ${CSS_COLUMN_WIDTH}: calc((var(${CSS_GRID}) - var(${CSS_GUTTER})) / var(${CSS_COLUMNS}));\n  max-width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto;\n\n  ${() =>\n    DEVICES.map((device) => {\n      const media = MEDIA[device];\n      const grid = GRID[device];\n      const columns = COLUMNS[device];\n      const alley = ALLEY[device];\n\n      return css`\n        @media ${media} {\n          ${CSS_ALLEY}: ${alley}px;\n          ${CSS_COLUMNS}: ${columns};\n          ${CSS_GRID}: ${typeof grid === 'number' ? `${grid}px` : grid};\n          max-width: var(${CSS_GRID});\n          padding: 0 var(${CSS_GUTTER});\n        }\n      `;\n    })}\n`;\n"],"names":["blockDeviceProps","prop","__name","OffGrid","styled","InlineContainer","CSS_OVERHANG","CSS_COLUMN_WIDTH","CSS_OFFSET","CSS_GUTTER","CSS_GRID","span","DEVICES","device","media","MEDIA","deviceSpan","styles","css","align","Column","deviceOffset","offset","Row","Grid","GUTTER","CSS_ALLEY","ALLEY","CSS_COLUMNS","COLUMNS","GRID","grid","columns","alley"],"mappings":"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"}