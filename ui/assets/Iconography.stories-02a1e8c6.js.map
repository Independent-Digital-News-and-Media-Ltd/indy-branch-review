{"version":3,"file":"Iconography.stories-02a1e8c6.js","sources":["../../../src/assets/icons/add-circle-outline-24.svg","../../../src/assets/icons/add-circle-solid-24.svg","../../../src/assets/icons/check-solid-24.svg","../../../src/assets/icons/chevron-down-large-solid-24.svg","../../../src/assets/icons/info-solid-24.svg","../../../src/assets/icons/launch-outline-24.svg","../../../src/assets/icons/logo-stamp-small-climate-solid-24.svg","../../../src/assets/icons/logo-stamp-small-premium-solid-24.svg","../../../src/assets/icons/logo-stamp-small-primary-solid-24.svg","../../../src/assets/icons/logo-stamp-small-white-solid-24.svg","../../../src/assets/icons/menu-solid-16.svg","../../../src/assets/icons/menu-solid-24.svg","../../../src/assets/icons/plus-round-outline-12.svg","../../../src/assets/icons/plus-round-outline-16.svg","../../../src/assets/icons/plus-round-outline-32.svg","../../../src/assets/icons/plus-round-solid-12.svg","../../../src/assets/icons/plus-round-solid-16.svg","../../../src/assets/icons/plus-round-solid-32.svg","../../../src/assets/icons/profile-solid-24.svg","../../../src/assets/icons/scissors-outline-32.svg","../../../src/assets/icons/search-outline-24.svg","../../../src/assets/icons/signpost-solid-24.svg","../../../src/assets/icons/sun-bed-outline-24.svg","../../../src/assets/icons/tick-round-solid-12.svg","../../../src/assets/icons/tick-round-solid-16.svg","../../../src/assets/icons/tick-round-solid-32.svg","../../../src/assets/icons/up-vote-outline-32.svg","../../../src/assets/icons/index.js","../../../src/pages/components/Icons.jsx","../../../src/pages/principles/Iconography.stories.mdx"],"sourcesContent":["export default \"__VITE_ASSET__5340a958__\"","export default \"__VITE_ASSET__49651f51__\"","export default \"__VITE_ASSET__ca217bd4__\"","export default \"__VITE_ASSET__e4a15790__\"","export default \"__VITE_ASSET__9b0dfb85__\"","export default \"__VITE_ASSET__978d43df__\"","export default \"__VITE_ASSET__8290b2b4__\"","export default \"__VITE_ASSET__c5f662c0__\"","export default \"__VITE_ASSET__1a6513e1__\"","export default \"__VITE_ASSET__d14427fa__\"","export default \"__VITE_ASSET__0abb9911__\"","export default \"__VITE_ASSET__7f6ddfc0__\"","export default \"__VITE_ASSET__9aa20b0c__\"","export default \"__VITE_ASSET__4c2df2d9__\"","export default \"__VITE_ASSET__93ed6229__\"","export default \"__VITE_ASSET__495a83dc__\"","export default \"__VITE_ASSET__383ad836__\"","export default \"__VITE_ASSET__23827307__\"","export default \"__VITE_ASSET__3241323f__\"","export default \"__VITE_ASSET__d0077736__\"","export default \"__VITE_ASSET__8dc7b311__\"","export default \"__VITE_ASSET__48879498__\"","export default \"__VITE_ASSET__da5d372b__\"","export default \"__VITE_ASSET__ba315b9d__\"","export default \"__VITE_ASSET__2b877671__\"","export default \"__VITE_ASSET__61a1d99d__\"","export default \"__VITE_ASSET__05a4aab2__\"","/**\n * This is here to sidestep the fact that Jest does not like the `import.meta`\n * syntax. This file has been omitted from the coverage report as a result.\n * @todo find a way of supporting `import.meta...` in Jest\n * @see {@link https://github.com/vitejs/vite/issues/1149}\n */\n\nconst svgs = import.meta.glob('#icons/**/*.svg', { eager: true });\n\nexport default svgs;\n","import { PropTypes } from 'prop-types';\n\nimport svgs from '#icons';\n\nimport Icon from '#components/Icon';\n\nimport Copyable from './Copyable';\nimport {\n  Headings,\n  Group,\n  GroupHeader,\n  GroupTitle,\n  GroupTable,\n  RowHeading,\n  Cell,\n  CellContents,\n  Description,\n} from './Table';\n\n/** @todo make these constants */\nconst iconsRoot = '/src/assets/icons/';\nconst iconsAlias = '#icons/';\nconst variants = ['outline', 'solid'];\nconst sizes = { 12: 'x-small', 16: 'small', 24: 'base', 32: 'large' };\n\n/**\n * Returns an object of icons grouped by name, size and variant\n * @param {object} files A map of paths to modules\n * @returns {array} A manifest of the icons in the below format\n *\n * [\n *   {\n *     group: 'misc',\n *     values: [\n *       {\n *         16: {\n *           outline: {\n *             icon: <Icon svg={...},\n *             name: 'SvgMyIcon16',\n *             path: '#icons/add-circle-outline-16.svg'\n *           },\n *           solid: {\n *             ...\n *           }\n *         },\n *         24: {\n *           ...\n *         }\n *       },\n *       ...\n *     ]\n *   },\n *   ...\n * ]\n *\n * @todo break this function up into smaller utils e.g. variant extraction,\n * icon creation etc.\n */\nfunction organiseIconFiles(root, alias, files, sizes) {\n  // Create a map of icons grouped by name, size and variant, this allows us\n  // to group the icon variants by name\n  const variantsMap = Object.entries(files).reduce((acc, [path, mod]) => {\n    // Remove the root path from the path to get the relative path\n    const relativePath = path.replace(root, '').split('/');\n\n    // Get the directory and the filename. These values might be the the same\n    // thing if the file is in the root\n    const dir = relativePath.at(0);\n    const filename = relativePath.at(-1);\n\n    // If the `dir` and `filename` are the same then it means that the icon is\n    // in the icon root directory and not in a subdirectory\n    const hasGroup = dir !== filename;\n\n    // Remove the extension from the filename\n    const name = filename.replace('.svg', '');\n\n    // Use the directory as the group name if it exists, otherwise use 'misc'\n    const group = hasGroup ? dir : 'misc';\n\n    // The filename should be in the format `{token}-{variant}-{size}.svg`\n    const parts = name.split('-');\n    const size = parts.at(-1);\n    const variant = parts.at(-2);\n    const token = parts.slice(0, -2).join('-');\n\n    if (!token || !size || !variant) {\n      console.error(\n        `'${filename}' is not in the correct format. Expected '{token}-{variant}-{size}.svg'.`,\n      );\n      return acc;\n    }\n\n    return {\n      ...acc,\n      [group]: {\n        ...acc[group],\n        [token]: {\n          ...acc[group]?.[token],\n          [size]: {\n            ...acc[group]?.[token]?.[size],\n            [variant]: {\n              name: mod.default.name,\n              icon: <Icon size={sizes[size]} svg={mod.default} />,\n              path: path.replace(root, alias),\n            },\n          },\n        },\n      },\n    };\n  }, {});\n\n  // Flatten the object into a more iterative form\n  const variants = Object.entries(variantsMap).map(([group, tokens]) => ({\n    group,\n    values: Object.entries(tokens).map(([token, sizes]) => ({\n      token,\n      ...sizes,\n    })),\n  }));\n\n  return variants;\n}\n\nconst Variants = ({ svgs, variants }) => (\n  <CellContents>\n    {variants.map((variant) => {\n      const { name, path, icon } = svgs[variant] || {};\n\n      if (!name || !path || !icon) {\n        return null;\n      }\n\n      return (\n        <Copyable key={variant} value={`import ${name} from '${path}';`}>\n          {icon}\n        </Copyable>\n      );\n    })}\n  </CellContents>\n);\n\nconst variantPropTypes = {\n  name: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  icon: PropTypes.node.isRequired,\n};\n\nconst sizePropTypes = Object.fromEntries(\n  variants.map((variant) => [variant, PropTypes.shape(variantPropTypes)]),\n);\n\nVariants.propTypes = {\n  svgs: PropTypes.shape(sizePropTypes),\n  variants: PropTypes.arrayOf(PropTypes.oneOf(variants)),\n};\n\nconst Icons = () => {\n  const groups = organiseIconFiles(iconsRoot, iconsAlias, svgs, sizes);\n  const headings = Object.entries(sizes);\n\n  return (\n    <>\n      <Headings colCount={headings.length}>\n        <thead>\n          <tr>\n            <th></th>\n            {headings.map(([px, name], i) => (\n              <th key={`column-${i}`}>\n                {name}\n                <br />\n                <Description>{px}px</Description>\n              </th>\n            ))}\n          </tr>\n        </thead>\n      </Headings>\n      {groups.map(({ group, values }, i) => (\n        <Group key={i}>\n          <GroupHeader>\n            <GroupTitle>{group}</GroupTitle>\n          </GroupHeader>\n          <GroupTable colCount={headings.length}>\n            <tbody>\n              {values.map(({ token, ...rest }, j) => (\n                <tr key={`icon-${j}`}>\n                  <RowHeading>{token}</RowHeading>\n                  {Object.keys(sizes).map((size, j) => (\n                    <Cell key={`variant-${j}`}>\n                      {rest[size] && (\n                        <Variants svgs={rest[size]} variants={variants} />\n                      )}\n                    </Cell>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </GroupTable>\n        </Group>\n      ))}\n    </>\n  );\n};\n\nexport default Icons;\n","import { Meta } from '@storybook/addon-docs';\n\nimport Icons from '../components/Icons';\n\n<Meta title=\"Principles/Iconography\" />\n\n<Icons />\n"],"names":["SvgAddCircleOutline24","__name","props","React.createElement","SvgAddCircleSolid24","SvgCheckSolid24","SvgChevronDownLargeSolid24","SvgInfoSolid24","SvgLaunchOutline24","SvgLogoStampSmallClimateSolid24","SvgLogoStampSmallPremiumSolid24","SvgLogoStampSmallPrimarySolid24","SvgLogoStampSmallWhiteSolid24","SvgMenuSolid16","SvgMenuSolid24","SvgPlusRoundOutline12","SvgPlusRoundOutline16","SvgPlusRoundOutline32","SvgPlusRoundSolid12","SvgPlusRoundSolid16","SvgPlusRoundSolid32","SvgProfileSolid24","SvgScissorsOutline32","SvgSearchOutline24","SvgSignpostSolid24","SvgSunBedOutline24","SvgTickRoundSolid12","SvgTickRoundSolid16","SvgTickRoundSolid32","SvgUpVoteOutline32","svgs","import","iconsRoot","iconsAlias","variants","sizes","organiseIconFiles","root","alias","files","variantsMap","Object","entries","reduce","acc","path","mod","relativePath","replace","split","dir","at","filename","hasGroup","name","group","parts","size","variant","token","slice","join","error","default","icon","Icon","map","tokens","values","Variants","jsx","CellContents","Copyable","variantPropTypes","PropTypes","string","isRequired","node","sizePropTypes","fromEntries","shape","propTypes","arrayOf","oneOf","Icons","groups","headings","jsxs","Fragment","Headings","length","px","i","Description","Group","GroupHeader","GroupTitle","GroupTable","rest","j","RowHeading","keys","Cell","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_jsxs","_Fragment","Meta","__page","componentMeta","__namedExportsOrder"],"mappings":"+jFACA,MAAMA,GAAwBC,EAACC,GAA0BC,EAAmB,cAAC,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAAA,cAAoB,SAAU,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,KAAM,OAAQ,OAAQ,eAAgB,YAAa,CAAG,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,KAAM,eAAgB,EAAG,kCAAkC,CAAE,CAAC,EAAlY,kICAxBC,GAAsBH,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,EAAmB,cAAC,SAAU,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,KAAM,cAAgB,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,KAAM,OAAQ,EAAG,kCAAkC,CAAE,CAAC,EAA3V,gICAtBE,GAAkBJ,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,2DAA2D,CAAE,CAAC,EAA5R,4HCAlBG,GAA6BL,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,wDAAwD,CAAE,CAAC,EAAzR,uICA7BI,GAAiBN,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,kIAAkI,CAAE,CAAC,EAAnW,2HCAjBK,GAAqBP,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,gFAAgF,CAAE,CAAC,EAAjT,+HCArBM,GAAkCR,EAACC,GAA0BC,EAAmB,cAAC,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,YAAa,sBAAuB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,EAAmB,cAAC,OAAQ,KAAsBA,EAAAA,cAAoB,iBAAkB,CAAE,GAAI,8BAA+B,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,cAAe,gBAAgB,EAAoBA,EAAmB,cAAC,OAAQ,CAAE,UAAW,SAAS,CAAE,EAAmBA,EAAmB,cAAC,OAAQ,CAAE,OAAQ,IAAM,UAAW,SAAW,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,OAAQ,EAAG,UAAW,SAAS,CAAE,CAAC,CAAC,EAAmBA,EAAAA,cAAoB,SAAU,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,KAAM,mCAAqC,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,KAAM,OAAQ,EAAG,8kGAA8kG,CAAE,CAAC,EAA/3H,4ICAlCO,GAAkCT,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,YAAa,sBAAuB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,gBAAoB,SAAU,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,KAAM,SAAS,CAAE,EAAmBA,EAAmB,cAAC,OAAQ,CAAE,KAAM,OAAQ,EAAG,8kGAA8kG,CAAE,CAAC,EAAt6G,4ICAlCQ,GAAkCV,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,YAAa,aAAc,QAAS,YAAa,GAAGD,CAAO,EAAkBC,gBAAoB,SAAU,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,KAAM,SAAS,CAAE,EAAmBA,EAAmB,cAAC,OAAQ,CAAE,KAAM,OAAQ,EAAG,8kGAA8kG,CAAE,CAAC,EAA75G,4ICAlCS,GAAgCX,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,EAAmB,cAAC,SAAU,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,KAAM,MAAQ,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,KAAM,UAAW,EAAG,8kGAA8kG,CAAE,CAAC,EAAl4G,0ICAhCU,GAAiBZ,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,sCAAsC,CAAE,CAAC,EAAvQ,2HCAjBW,GAAiBb,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,sCAAsC,CAAE,CAAC,EAAvQ,2HCAjBY,GAAwBd,EAACC,GAA0BC,EAAmB,cAAC,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,GAAyBC,EAAAA,cAAoB,OAAQ,CAAE,KAAM,eAAgB,SAAU,UAAW,EAAG,oIAAqI,SAAU,SAAW,CAAA,CAAC,EAA9Y,kICAxBa,GAAwBf,EAACC,GAA0BC,EAAmB,cAAC,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,GAAyBC,EAAAA,cAAoB,OAAQ,CAAE,KAAM,eAAgB,SAAU,UAAW,EAAG,uIAAwI,SAAU,SAAW,CAAA,CAAC,EAAjZ,kICAxBc,GAAwBhB,EAACC,GAA0BC,EAAmB,cAAC,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,GAAyBC,EAAAA,cAAoB,OAAQ,CAAE,KAAM,eAAgB,SAAU,UAAW,EAAG,4JAA6J,SAAU,SAAW,CAAA,CAAC,EAAta,kICAxBe,GAAsBjB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,EAAmB,cAAC,SAAU,CAAE,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,KAAM,cAAgB,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,KAAM,OAAQ,EAAG,6CAA6C,CAAE,CAAC,EAAnW,gICAtBgB,GAAsBlB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,EAAmB,cAAC,SAAU,CAAE,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,KAAM,cAAgB,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,KAAM,OAAQ,EAAG,gDAAgD,CAAE,CAAC,EAAtW,gICAtBiB,GAAsBnB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,KAAM,OAAQ,QAAS,YAAa,GAAGD,CAAO,EAAkBC,gBAAoB,SAAU,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,KAAM,cAAc,CAAE,EAAmBA,EAAmB,cAAC,OAAQ,CAAE,KAAM,OAAQ,EAAG,qDAAqD,CAAE,CAAC,EAA5X,gICAtBkB,GAAoBpB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,mNAAmN,CAAE,CAAC,EAApb,8HCApBmB,GAAuBrB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,42BAA42B,CAAE,CAAC,EAA7kC,iICAvBoB,GAAqBtB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,4hBAA4hB,CAAE,CAAC,EAA7vB,+HCArBqB,GAAqBvB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,mUAAmU,CAAE,CAAC,EAApiB,+HCArBsB,GAAqBxB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAK,EAAoBC,EAAmB,cAAC,OAAQ,CAAE,KAAM,eAAgB,EAAG,suBAAsuB,CAAE,CAAC,EAAv8B,+HCArBuB,GAAsBzB,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,EAAmB,cAAC,SAAU,CAAE,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,KAAM,cAAgB,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,KAAM,OAAQ,EAAG,6CAA6C,CAAE,CAAC,EAAnW,gICAtBwB,GAAsB1B,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,EAAmB,cAAC,SAAU,CAAE,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,KAAM,cAAgB,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,KAAM,OAAQ,EAAG,oDAAoD,CAAE,CAAC,EAA1W,gICAtByB,GAAsB3B,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,KAAM,OAAQ,QAAS,YAAa,GAAGD,CAAO,EAAkBC,gBAAoB,SAAU,CAAE,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,KAAM,cAAc,CAAE,EAAmBA,EAAmB,cAAC,OAAQ,CAAE,KAAM,OAAQ,EAAG,uDAAuD,CAAE,CAAC,EAA9X,gICAtB0B,GAAqB5B,EAACC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,GAAI,mBAAoB,QAAS,YAAa,GAAGD,CAAO,EAAkBC,EAAmB,cAAC,IAAK,CAAE,KAAM,eAAgB,SAAU,UAAW,SAAU,SAAS,EAAoBA,EAAAA,cAAoB,OAAQ,CAAE,EAAG,uGAAyG,CAAA,EAAmBA,EAAAA,cAAoB,OAAQ,CAAE,EAAG,gQAAkQ,CAAA,CAAC,CAAC,EAAttB,+HCMrB2B,GAAOC,OAAAA,OAAAA,CAAAA,8CAAAA,GAAAA,4CAAAA,GAAAA,2CAAAA,EAAAA,yCAAAA,EAAAA,uCAAAA,EAAAA,wCAAAA,EAAAA,4CAAAA,EAAAA,0CAAAA,GAAAA,iDAAAA,GAAAA,iDAAAA,GAAAA,0CAAAA,GAAAA,yCAAAA,EAAAA,uCAAAA,EAAAA,uCAAAA,EAAAA,uCAAAA,GAAAA,uCAAAA,GAAAA,oDAAAA,GAAAA,8CAAAA,GAAAA,8CAAAA,GAAAA,8CAAAA,GAAAA,8CAAAA,GAAAA,+CAAAA,GAAAA,+CAAAA,GAAAA,+CAAAA,GAAAA,uCAAAA,GAAAA,uCAAAA,GAAAA,wCAAAA,GAAAA,yCAAAA,EAAAA,uCAAAA,GAAAA,uCAAAA,EAAAA,uCAAAA,GAAAA,4CAAAA,GAAAA,6CAAAA,GAAAA,yCAAAA,EAAAA,wCAAAA,EAAAA,yCAAAA,GAAAA,wCAAAA,GAAAA,sCAAAA,GAAAA,0CAAAA,GAAAA,0CAAAA,GAAAA,0CAAAA,GAAAA,+CAAAA,GAAAA,mDAAAA,GAAAA,mDAAAA,GAAAA,mDAAAA,GAAAA,0DAAAA,GAAAA,6DAAAA,GAAAA,0DAAAA,GAAAA,0DAAAA,GAAAA,wDAAAA,GAAAA,sCAAAA,GAAAA,sCAAAA,GAAAA,2CAAAA,EAAAA,+CAAAA,EAAAA,yCAAAA,EAAAA,8CAAAA,GAAAA,8CAAAA,GAAAA,8CAAAA,GAAAA,8CAAAA,GAAAA,4CAAAA,GAAAA,4CAAAA,GAAAA,4CAAAA,GAAAA,4CAAAA,GAAAA,yCAAAA,GAAAA,4CAAAA,GAAAA,8CAAAA,GAAAA,4CAAAA,GAAAA,0CAAAA,GAAAA,0CAAAA,GAAAA,qCAAAA,GAAAA,2CAAAA,GAAAA,wCAAAA,GAAAA,sCAAAA,GAAAA,2CAAAA,GAAAA,6CAAAA,GAAAA,wCAAAA,EAAAA,gCAAAA,GAAAA,4CAAAA,GAAAA,4CAAAA,GAAAA,4CAAAA,GAAAA,4CAAAA,GAAAA,sCAAAA,GAAAA,0CAAAA,EAAAA,wCAAAA,EAAAA,yCAAAA,EAAAA,2CAAAA,GAAAA,8CAAAA,GAAAA,yCAAAA,GAAAA,gDAAAA,EAAAA,wCAAAA,ICabC,GAAA,qBACAC,GAAA,UACAC,EAAA,CAAA,UAAA,OAAA,EACAC,EAAA,CAAA,GAAA,UAAA,GAAA,QAAA,GAAA,OAAA,GAAA,OAAA,EAmCA,SAAAC,GAAAC,EAAAC,EAAAC,EAAAJ,EAAA,CAGAK,MAAAA,EAAAC,OAAAC,QAAAH,CAAA,EAAAI,OAAA,CAAAC,EAAA,CAAAC,EAAAC,CAAA,IAAA,WAEA,MAAAC,EAAAF,EAAAG,QAAAX,EAAA,EAAA,EAAAY,MAAA,GAAA,EAIAC,EAAAH,EAAAI,GAAA,CAAA,EACAC,EAAAL,EAAAI,GAAA,EAAA,EAIAE,EAAAH,IAAAE,EAGAE,EAAAF,EAAAJ,QAAA,OAAA,EAAA,EAGAO,EAAAF,EAAAH,EAAA,OAGAM,EAAAF,EAAAL,MAAA,GAAA,EACAQ,EAAAD,EAAAL,GAAA,EAAA,EACAO,EAAAF,EAAAL,GAAA,EAAA,EACAQ,EAAAH,EAAAI,MAAA,EAAA,EAAA,EAAAC,KAAA,GAAA,EAEA,MAAA,CAAAF,GAAA,CAAAF,GAAA,CAAAC,GACAI,QAAAA,MACA,IAAAV,2EACA,EACAR,GAGA,CACA,GAAAA,EACA,CAAAW,CAAA,EAAA,CACA,GAAAX,EAAAW,CAAA,EACA,CAAAI,CAAA,EAAA,CACA,IAAAf,EAAAA,EAAAW,CAAA,IAAAX,YAAAA,EAAAe,GACA,CAAAF,CAAA,EAAA,CACA,IAAAb,GAAAA,EAAAA,EAAAW,CAAA,IAAAX,YAAAA,EAAAe,KAAAf,YAAAA,EAAAa,GACA,CAAAC,CAAA,EAAA,CACAJ,KAAAR,EAAAiB,QAAAT,KACAU,WAAAC,GAAA,CAAA,KAAA9B,EAAAsB,CAAA,EAAA,IAAAX,EAAAiB,QAAA,EACAlB,KAAAA,EAAAG,QAAAX,EAAAC,CAAA,CACA,CACA,CACA,CACA,CAAA,CAEA,EAAA,CAAA,CAAA,EAWAJ,OARAO,OAAAC,QAAAF,CAAA,EAAA0B,IAAA,CAAA,CAAAX,EAAAY,CAAA,KAAA,CACAZ,MAAAA,EACAa,OAAA3B,OAAAC,QAAAyB,CAAA,EAAAD,IAAA,CAAA,CAAAP,EAAAxB,CAAA,KAAA,CACAwB,MAAAA,EACA,GAAAxB,CAAAA,EACA,CACA,EAAA,CAGA,CAhEAC,EAAAA,GAAAA,qBAkEA,MAAAiC,EAAAA,EAAAA,CAAA,CAAAvC,KAAAA,EAAAI,SAAAA,CAAA,IACAoC,EAAAA,IAAAC,GAAA,CACArC,SAAAA,EAAAgC,IAAAR,GAAA,CACA,KAAA,CAAAJ,KAAAA,EAAAT,KAAAA,EAAAmB,KAAAA,CAAAA,EAAAlC,EAAA4B,CAAA,GAAA,GAEA,MAAA,CAAAJ,GAAA,CAAAT,GAAA,CAAAmB,EACA,WAIAQ,GAAA,CAAA,MAAA,UAAAlB,WAAAT,MACAmB,YADAN,CAEA,CAEA,CAAA,CACA,CAAA,EAfAW,YAkBAI,GAAA,CACAnB,KAAAoB,EAAAA,UAAAC,OAAAC,WACA/B,KAAA6B,EAAAA,UAAAC,OAAAC,WACAZ,KAAAU,EAAAA,UAAAG,KAAAD,UACA,EAEAE,GAAArC,OAAAsC,YACA7C,EAAAgC,IAAAR,GAAA,CAAAA,EAAAgB,EAAAA,UAAAM,MAAAP,EAAA,CAAA,CAAA,CACA,EAEAJ,EAAAY,UAAA,CACAnD,KAAA4C,EAAAA,UAAAM,MAAAF,EAAA,EACA5C,SAAAwC,EAAAQ,UAAAA,QAAAR,EAAAS,UAAAA,MAAAjD,CAAA,CAAA,CACA,EAEA,MAAAkD,EAAAA,EAAAA,IAAA,CACA,MAAAC,EAAAjD,GAAAJ,GAAAC,GAAAH,GAAAK,CAAA,EACAmD,EAAA7C,OAAAC,QAAAP,CAAA,EAEA,OAEAoD,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAlB,EAAAA,IAAAmB,IAAA,SAAAH,EAAAI,OACA,SAAApB,MAAA,QAAA,CACA,gBAAA,KACA,CAAA,SAAA,CAAAA,EAAA,IAAA,KAAA,EAAA,EACAgB,EAAApB,IAAA,CAAA,CAAAyB,EAAArC,CAAA,EAAAsC,IACAL,EAAA,KAAA,KACAjC,CAAAA,SAAAA,CAAAA,QACA,KAAA,EAAA,SACAuC,GAAAF,CAAAA,SAAAA,CAAAA,EAAA,IAAA,EAAA,CAHA,CAAA,EAAA,UAAAC,GAIA,CACA,CAAA,CACA,CAAA,CACA,CAAA,EACA,EACAP,EAAAnB,IAAA,CAAA,CAAAX,MAAAA,EAAAa,OAAAA,CAAA,EAAAwB,IACAL,EAAAA,KAAAO,GACA,CAAA,SAAA,CAAAxB,MAAAyB,GACA,CAAA,SAAAzB,EAAA,IAAA0B,GAAAzC,CAAAA,SAAAA,CAAA,CAAA,EACA,EACAe,EAAAA,IAAA2B,IAAA,SAAAX,EAAAI,OACA,SAAApB,EAAA,IAAA,QAAA,CACAF,SAAAF,EAAAA,IAAA,CAAA,CAAAP,MAAAA,EAAA,GAAAuC,CAAA,EAAAC,IACAZ,EAAAA,KAAA,KACA,CAAA,SAAA,CAAAjB,EAAAA,IAAA8B,IAAAzC,SAAAA,CAAA,CAAA,EACAlB,OAAA4D,KAAAlE,CAAA,EAAA+B,IAAA,CAAAT,EAAA0C,IACA7B,EAAA,IAAAgC,GACAJ,CAAAA,SAAAA,EAAAzC,CAAA,GACAa,EAAA,IAAAD,EAAA,CAAA,KAAA6B,EAAAzC,CAAA,EAAA,SAAAvB,CACA,CAAA,CAAA,EAHA,WAAAiE,GAIA,CACA,CAAA,CAAA,EARA,QAAAA,GASA,CACA,CACA,CAAA,EACA,CAAA,CAAA,EAnBAP,CAoBA,CACA,CACA,CAAA,CAAA,CAEA,EA7CAR,wECtJA,SAASmB,GAAWrG,EAAQ,GAAI,CAC9B,KAAM,CACJ,QAASsG,CACb,EAAM,OAAO,OAAO,CAAE,EAAEC,GAAkB,EAAIvG,EAAM,UAAU,EAC5D,OAAOsG,EAAyBE,EAAAA,IAAKF,EAAW,CAAE,GAAGtG,EACnD,SAAuBwG,EAAAA,IAAKC,EAAmB,EAAE,CACrD,CAAG,EAAIA,EAAiB,EAEtB,SAASA,GAAoB,CAC3B,OAAoBC,EAAAA,KAAMC,EAAAA,SAAW,CACnC,SAAU,CAAcH,EAAI,IAACI,EAAM,CACjC,MAAO,wBACR,CAAA,EAAG;AAAA,EAAmBJ,EAAAA,IAAKtB,EAAO,CAAE,CAAA,CAAC,CAC5C,CAAK,CACF,CACH,CAfSnF,EAAAsG,GAAA,cAmBG,MAACQ,GAAS9G,EAAA,IAAM,CAC1B,MAAM,IAAI,MAAM,iBAAiB,CACnC,EAFsB,UAGtB8G,GAAO,WAAa,CAClB,SAAU,EACZ,EACK,MAACC,EAAgB,CACpB,MAAO,yBACP,KAAM,CAAC,aAAa,EACpB,eAAgB,CAAC,QAAQ,CAC3B,EACAA,EAAc,WAAaA,EAAc,YAAc,GACvDA,EAAc,WAAW,KAAO,CAAE,GAAIA,EAAc,WAAW,MAAQ,GACrE,KAAMT,EACR,EAC4B,MAAAU,GAAA,CAAA,QAAA"}