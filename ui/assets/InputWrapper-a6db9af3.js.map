{"version":3,"file":"InputWrapper-a6db9af3.js","sources":["../../../src/utils/formValidation.ts","../../../src/components/Form/Input/Input.types.ts","../../../src/components/Form/Input/Input.styles.ts","../../../src/components/Form/Input/InputWrapper.tsx"],"sourcesContent":["import { FieldValues, Resolver } from 'react-hook-form';\n\nimport { Schema } from './schema';\nimport { CharacterType, ValidationErrors } from './schema/schema.types';\n\nexport const hintId = <T>(id: keyof T) => {\n  return `${id as string}-hint`;\n};\n\nexport const errorId = <T>(id: keyof T) => {\n  return `${id as string}-error`;\n};\n\nexport const capitalise = (str: string) =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nconst characterTypeMap = {\n  letters: new RegExp('[A-Za-z]', 'g'),\n  digits: new RegExp('[0-9]', 'g'),\n  uppercaseLetters: new RegExp('[A-Z]', 'g'),\n  lowercaseLetters: new RegExp('[a-z]', 'g'),\n};\n\nexport const count = (value: string, type?: CharacterType) => {\n  if (!type) {\n    return value?.length;\n  }\n\n  const regExp = characterTypeMap[type];\n  const results = value.match(regExp) || [];\n\n  return results.length;\n};\n\nexport const parseString = (value?: unknown) => {\n  if (typeof value === 'string') {\n    const trimmed = value.replace(/\\s{2,}/g, ' ').trim();\n    return trimmed;\n  }\n\n  return value || '';\n};\n\nexport const getAllErrors = async <T extends FieldValues>(\n  schema: Schema<T>,\n  values: T,\n) => {\n  const fieldErrors = schema.fields.map(async (fieldKey) => {\n    const fieldErrors =\n      (await schema.validate(fieldKey, values[fieldKey], values)) || [];\n    const hasErrors = fieldErrors.length > 0;\n    if (hasErrors) {\n      return { [fieldKey]: fieldErrors };\n    }\n  });\n  const result = await Promise.all(fieldErrors);\n  const resultFiltered = result.filter(Boolean) as ValidationErrors<T>[];\n  const resultConverted = resultFiltered.reduce((acc, error) => {\n    const [key, value] = Object.entries(error)[0];\n    return { ...acc, [key]: value };\n  }, {} as ValidationErrors<T>);\n  return resultConverted;\n};\n\nexport const resolver = <T extends FieldValues>(\n  schema: Schema<T>,\n): Resolver<T> => {\n  return async (values) => {\n    const formErrors = await getAllErrors(schema, values);\n    return { values, errors: formErrors };\n  };\n};\n","import { HTMLProps } from 'react';\n\nexport enum InputState {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  SUCCESS = 'success',\n  WAITING = 'waiting',\n}\n/**\n * Accepts generic type `T` to extend different input types\n * e.g. `HTMLInputElement`, `HTMLSelectElement`\n */\nexport interface FormInputProps<T> extends HTMLProps<T> {\n  id: string;\n  /** Style guide: Text fields should always have a label */\n  label: string;\n  /** Style guide: Input constraints can be displayed here e.g. for Expiry Date: MM/YY */\n  helpText?: string;\n  /**\n   * When controlled={true}, the message that will display on error\n   * Otherwise, the state must be manually set to InputState.ERROR\n   */\n  message?: string;\n  /**\n   * The state of the input - defines border style, and whether to show\n   * error messages\n   */\n  state: InputState;\n  /**\n   * Whether to display the asterisk indicating a required field\n   * Note: This is purely a VISUAL indicator, and does not affect validation\n   */\n  required?: boolean;\n  /**\n   * Whether the input's validation (errors and state) are controlled by\n   * react-hook-form (requiring use of FormProvider from @indy/ui/Form)\n   */\n  controlled?: boolean;\n}\n\nexport interface StyledInputProps extends HTMLProps<HTMLInputElement> {\n  $hasButton: boolean;\n}\n","import { styled, DefaultTheme } from 'styled-components';\n\nimport Icon from '#components/Icon';\n\nimport { InputState } from './Input.types';\n\nexport const getBorderStyle = (\n  theme: DefaultTheme,\n  state: InputState,\n  type: 'focused' | 'inactive',\n) => {\n  const styles = {\n    inactive: {\n      [InputState.DEFAULT]: `1px solid ${theme.color.semiotic.inactive};`,\n      [InputState.ERROR]: `2px solid ${theme.color.semiotic.error}`,\n      [InputState.SUCCESS]: `2px solid ${theme.color.semiotic.success}`,\n      [InputState.WAITING]: `2px solid ${theme.color.semiotic.info}`,\n    },\n    focused: {\n      [InputState.DEFAULT]: `2px solid ${theme.color.semiotic.info}`,\n      [InputState.ERROR]: `2px solid ${theme.color.semiotic.error}`,\n      [InputState.SUCCESS]: `2px solid ${theme.color.semiotic.info}`,\n      [InputState.WAITING]: `2px solid ${theme.color.semiotic.info}`,\n    },\n  };\n\n  return styles[type][state];\n};\n\n// while this appears to be always be an input, we will override this\n// using the \"as\" attribute to make it a select/textarea\nexport const BaseInput = styled.input`\n  display: block;\n  width: 100%;\n  height: var(--input-height);\n  box-sizing: border-box;\n  padding-top: ${({ theme }) => theme.spacing.x1}px;\n  padding-right: ${({ theme }) => theme.spacing.x2}px;\n  padding-bottom: ${({ theme }) => theme.spacing.x1}px;\n  padding-left: ${({ theme }) => theme.spacing.x2}px;\n  border: none;\n  border-radius: var(--border-radius);\n  background-color: ${({ theme }) => theme.color.ink.inverted};\n  font: ${({ theme }) => theme.textStyle.formInput.base};\n\n  &:focus,\n  &:focus-visible {\n    border: none;\n    outline: none;\n  }\n\n  &:disabled {\n    background-color: ${({ theme }) => theme.color.semiotic.disabled};\n    color: ${({ theme }) => theme.color.ink.inverted};\n\n    /* required for Safari */\n    opacity: 1;\n    -webkit-text-fill-color: ${({ theme }) => theme.color.ink.inverted};\n  }\n`;\n\nexport const Wrapper = styled.div`\n  --input-height: ${({ theme }) => theme.dimension.btn.height}px;\n  --border-radius: 4px;\n\n  align-items: center;\n  margin-bottom: ${({ theme }) => theme.spacing.x1}px;\n  color: ${({ theme }) => theme.color.ink.base};\n  font: ${({ theme }) => theme.textStyle.formInput.base};\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 0;\n  font: ${({ theme }) => theme.textStyle.formInput.label};\n`;\n\nexport const RequiredMarker = styled.span`\n  margin-right: ${({ theme }) => theme.spacing.x0_25}px;\n  color: ${({ theme }) => theme.color.semiotic.error};\n`;\n\nexport const HelpText = styled.p`\n  margin-top: ${({ theme }) => theme.spacing.x0_25}px;\n  margin-bottom: 0;\n  font: ${({ theme }) => theme.textStyle.formInput.helpText};\n`;\n\nexport const InputWrapper = styled.div<{ $state: InputState }>`\n  position: relative;\n  width: 100%;\n  margin-top: ${({ theme }) => theme.spacing.x1}px;\n  border-radius: var(--border-radius);\n  outline: ${({ theme, $state }) => getBorderStyle(theme, $state, 'inactive')};\n\n  &:focus-within {\n    border: none;\n    outline: ${({ theme, $state }) => getBorderStyle(theme, $state, 'focused')};\n  }\n`;\n\nexport const ErrorWrapper = styled.div`\n  margin-top: ${({ theme }) => theme.spacing.x0_5}px;\n  margin-bottom: ${({ theme }) => theme.spacing.x2}px;\n`;\n\nexport const ErrorMessage = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.spacing.x0_5}px;\n  color: ${(props) => props.theme.color.semiotic.error};\n  font: ${({ theme }) => theme.textStyle.formInput.error};\n`;\n\nexport const ErrorIcon = styled(Icon)`\n  flex-shrink: 0;\n`;\n","import React from 'react';\n\nimport { errorId, hintId } from '#utils/formValidation';\n\nimport WarningSVG from '#assets/icons/warning-solid-24.svg';\n\nimport {\n  ErrorWrapper,\n  ErrorMessage,\n  ErrorIcon,\n  HelpText,\n  InputWrapper,\n  Label,\n  Wrapper,\n  RequiredMarker,\n} from './Input.styles';\nimport { InputState, FormInputProps } from './Input.types';\n\nconst FormInputWrapper: React.FC<FormInputProps<HTMLInputElement>> = ({\n  id,\n  label,\n  helpText,\n  className,\n  message,\n  state,\n  required,\n  children,\n}) => {\n  return (\n    <Wrapper className={className}>\n      <Label htmlFor={id}>{label}</Label>\n      {required && <RequiredMarker aria-hidden={true}>*</RequiredMarker>}\n      {helpText && <HelpText id={hintId(id)}>{helpText}</HelpText>}\n      <InputWrapper $state={state}>{children}</InputWrapper>\n      <ErrorWrapper aria-live=\"assertive\">\n        {state === InputState.ERROR && message && (\n          <ErrorMessage>\n            <ErrorIcon svg={WarningSVG} size=\"small\" />\n            <span id={errorId(id)}>{message}</span>\n          </ErrorMessage>\n        )}\n      </ErrorWrapper>\n    </Wrapper>\n  );\n};\n\nexport default FormInputWrapper;\n"],"names":["hintId","__name","id","errorId","capitalise","str","charAt","toUpperCase","slice","characterTypeMap","letters","RegExp","digits","uppercaseLetters","lowercaseLetters","count","value","type","length","regExp","match","parseString","replace","trim","getAllErrors","schema","values","fieldErrors","fields","map","fieldKey","validate","resultConverted","Promise","all","filter","Boolean","reduce","acc","error","key","Object","entries","resolver","formErrors","errors","InputState","DEFAULT","ERROR","SUCCESS","WAITING","getBorderStyle","theme","state","inactive","color","semiotic","success","info","focused","BaseInput","styled","input","withConfig","componentId","spacing","x1","x2","ink","inverted","textStyle","formInput","base","disabled","Wrapper","div","dimension","btn","height","Label","label","RequiredMarker","span","x0_25","HelpText","p","helpText","InputWrapper","$state","ErrorWrapper","x0_5","ErrorMessage","props","ErrorIcon","Icon","FormInputWrapper","className","message","required","jsxs","jsx","children","WarningSVG"],"mappings":"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"}