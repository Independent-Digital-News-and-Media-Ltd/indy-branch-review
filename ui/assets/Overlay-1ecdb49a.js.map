{"version":3,"file":"Overlay-1ecdb49a.js","sources":["../../../src/decorators/PreventBodyLock.tsx","../../../src/utils/log.ts","../../../src/components/Overlay/Overlay.constants.ts","../../../src/components/Overlay/Overlay.helpers.ts","../../../src/components/Overlay/Overlay.styles.ts","../../../src/components/Overlay/Overlay.tsx"],"sourcesContent":["import { FC } from 'react';\n\n/**\n * Usually we want to prevent the body from scrolling when a modal/overlay is\n * open. However, when viewing the storybook docs, we want to be able to\n * scroll the page when a modal/overlay is open.\n */\nexport const PreventBodyLock = (Story: FC) => {\n  const isDocPage = document.body.classList.contains('sb-main-fullscreen');\n\n  if (!isDocPage) {\n    return <Story />;\n  }\n\n  /**\n   * This \"hack\" prevents the styles being set by the overlay/modal\n   */\n  Object.defineProperties(document.body.style, {\n    overflow: {\n      set: (val) => val,\n      configurable: true,\n    },\n    height: {\n      set: (val) => val,\n      configurable: true,\n    },\n  });\n\n  return <Story />;\n};\n","type Args = unknown[];\n\nlet showLog: boolean | undefined;\n\nimport * as thisModule from './log';\n\n// for mocking in unit tests\nexport const retrieveShowLogReference = () => showLog;\n\nexport const isShowLog = () => {\n  let showLogReference = thisModule.retrieveShowLogReference();\n  if (typeof showLogReference === 'undefined') {\n    const params = new URLSearchParams(window?.location?.search);\n    showLogReference = params.has('__DEBUG__');\n  }\n\n  return showLogReference;\n};\n\nexport const log = (...args: Args) => {\n  // eslint-disable-next-line no-console\n  thisModule.isShowLog() && console.log(...args);\n};\n\nexport const warn = (...args: Args) => {\n  // eslint-disable-next-line no-console\n  thisModule.isShowLog() && console.warn(...args);\n};\n\nexport const error = (...args: Args) => {\n  // eslint-disable-next-line no-console\n  thisModule.isShowLog() && console.error(...args);\n};\n","export const CLASS_OVERLAY = 'overlay';\nexport const CLASS_OVERLAY_OPEN = 'overlay--open';\nexport const CLASS_OVERLAY_BACKGROUND = 'overlay-background';\nexport const CLASS_OVERLAY_BACKGROUND_OPEN = 'overlay-background--open';\n","export const FREEZE_BODY_CLASS = 'freeze-body';\n\nexport const freezeBody = () => {\n  document.documentElement.classList.add(FREEZE_BODY_CLASS);\n};\n\nexport const unfreezeBody = () => {\n  document.documentElement.classList.remove(FREEZE_BODY_CLASS);\n};\n\nexport const onDestroy = () => {\n  unfreezeBody();\n};\n","import { styled } from 'styled-components';\n\nimport { CLASS_OVERLAY_BACKGROUND_OPEN } from './Overlay.constants';\nimport { BackgroundProps } from './Overlay.types';\n\nexport const Background = styled.div<BackgroundProps>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: ${(props) => props.theme.zIndex.modalBackground};\n  background: ${(props) => props.theme.color.veil.base};\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 300ms ease-in-out;\n\n  &.${CLASS_OVERLAY_BACKGROUND_OPEN} {\n    width: 100vw;\n    height: 100vh;\n    opacity: 1;\n  }\n`;\n","import classnames from 'classnames';\nimport { FC, useEffect, useState } from 'react';\n\nimport { error } from '#utils/log';\n\nimport {\n  CLASS_OVERLAY_BACKGROUND,\n  CLASS_OVERLAY,\n  CLASS_OVERLAY_OPEN,\n  CLASS_OVERLAY_BACKGROUND_OPEN,\n} from './Overlay.constants';\nimport { freezeBody, unfreezeBody, onDestroy } from './Overlay.helpers';\nimport { Background } from './Overlay.styles';\nimport { OverlayProps } from './Overlay.types';\n\n// closing this overlay can also happen when the escape key is pressed,\n// this is managed with a global 'keydown' event listener that is contained\n// within ArchipelagoProvider.js\nconst Overlay: FC<OverlayProps> = ({\n  children,\n  isHidden = true,\n  returnFocus,\n  onBackgroundClick,\n  Wrapper,\n  className,\n  ...rest\n}) => {\n  const [isTriggered, setIsTriggered] = useState(false);\n  const backgroundClassName = isHidden ? '' : CLASS_OVERLAY_BACKGROUND_OPEN;\n  const wrapperClassName = isHidden ? '' : CLASS_OVERLAY_OPEN;\n\n  /* When it opens, set focus to the first button in the Lightbox, which should\n  be the close button. When it closes, refocus back on whatever element you\n  specify. */\n\n  useEffect(() => {\n    if (!isHidden) {\n      if (className) {\n        const nodes = document.querySelectorAll(`.${className} button`);\n        if (nodes.length) {\n          (nodes[0] as HTMLElement)?.focus();\n        } else {\n          error('No overlay buttons detected');\n        }\n      }\n      freezeBody();\n      setIsTriggered(true);\n    } else if (isTriggered) {\n      (document.querySelector(returnFocus) as HTMLElement)?.focus();\n      unfreezeBody();\n      setIsTriggered(false);\n    }\n\n    return () => {\n      onDestroy();\n    };\n  }, [isHidden, isTriggered, returnFocus, className]);\n\n  return (\n    <>\n      <Background\n        data-testid={CLASS_OVERLAY_BACKGROUND}\n        aria-hidden={isHidden}\n        className={classnames(CLASS_OVERLAY_BACKGROUND, backgroundClassName)}\n        $isHidden={isHidden}\n        onClick={onBackgroundClick}\n      />\n      <Wrapper\n        aria-hidden={isHidden}\n        className={classnames(CLASS_OVERLAY, wrapperClassName, className)}\n        $isHidden={isHidden}\n        {...rest}\n      >\n        {children}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Overlay;\n"],"names":["PreventBodyLock","__name","Story","Object","val","jsx","showLog","retrieveShowLogReference","isShowLog","showLogReference","thisModule","params","URLSearchParams","window","location","search","has","error","args","console","CLASS_OVERLAY","CLASS_OVERLAY_OPEN","CLASS_OVERLAY_BACKGROUND","CLASS_OVERLAY_BACKGROUND_OPEN","FREEZE_BODY_CLASS","freezeBody","documentElement","classList","add","unfreezeBody","remove","onDestroy","Background","styled","div","withConfig","componentId","props","theme","zIndex","modalBackground","color","veil","base","Overlay","children","returnFocus","onBackgroundClick","Wrapper","className","isTriggered","setIsTriggered","useState","backgroundClassName","isHidden","wrapperClassName","useEffect","_b","nodes","_a","jsxs","Fragment","classnames","rest","Overlay$1"],"mappings":"6QAOO,MAAAA,EAAAC,EAAAC,GACL,SAAA,KAAA,UAAA,SAAA,oBAAA,GASAC,OAAAA,iBAAAA,SAAAA,KAAAA,MAAAA,CAA6C,SAAA,CACjC,IAAAC,GAAAA,EACMA,aAAAA,EACA,EAChB,OAAA,CACQ,IAAAA,GAAAA,EACQA,aAAAA,EACA,CAChB,CAAA,EAGFC,EAAA,IAAAH,EAAA,CAAA,CAAA,GAjBEG,EAAA,IAAAH,EAAA,CAAA,CAAA,EAJG;;8FCLP,IAAII,EAKG,MAAMC,EAA2BA,EAAAA,IAAMD,EAANC,4BAE3BC,EAAYA,EAAAA,IAAM,OACzBC,IAAAA,EAAmBC,IACnB,OAAA,OAAOD,EAAqB,MAEXE,EADJ,IAAIC,iBAAgBC,EAAAA,2BAAQC,WAARD,YAAAA,EAAkBE,MAAM,EACjCC,IAAI,WAAW,GAGpCP,CACT,EARyBD,aAoBZS,EAAQA,EAAAA,IAAIC,IAAe,CAEtCR,EAAqB,GAAKS,QAAQF,MAAM,GAAGC,CAAI,CACjD,EAHqBD,SC7BRG,EAAgB,UAChBC,EAAqB,gBACrBC,EAA2B,qBAC3BC,EAAgC,2BCHhCC,EAAoB,cAEpBC,EAAaA,EAAAA,IAAM,CACrBC,SAAAA,gBAAgBC,UAAUC,IAAIJ,CAAiB,CAC1D,EAF0BC,cAIbI,EAAeA,EAAAA,IAAM,CACvBH,SAAAA,gBAAgBC,UAAUG,OAAON,CAAiB,CAC7D,EAF4BK,gBAIfE,EAAYA,EAAAA,IAAM,CAChBF,GACf,EAFyBE,aCLZC,EAAaC,EAAOC,IAAGC,WAAA,CAAAC,YAAA,cAAA,CAItBC,EAAAA,CAAAA,uCAAAA,eAAAA,oEAAAA,uCAAAA,EAAUA,GAAAA,EAAMC,MAAMC,OAAOC,gBAChBH,GAAAA,EAAMC,MAAMG,MAAMC,KAAKC,KAK5CpB,CAA6B,ECGnCqB,EAAA3C,EAAA,CAAA,CAAmC,SAAA4C,EACjCA,SAAAA,EAAAA,GACW,YAAAC,EACXA,kBAAAA,EACAC,QAAAA,EACAC,UAAAA,EACAC,GAAAA,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,EAAA,GAAA/B,EACAgC,EAAAD,EAAA,GAAAjC,EAMAmC,OAAAA,EAAAA,UAAAA,IAAAA,SACE,GAAAF,EAUqBJ,KAEnBO,EAAA,SAAA,cAAAX,CAAA,IAAA,MAAAW,EAAA,QACA5B,IACAsB,EAAAA,EAAAA,OAdF,CACE,GAAAF,EAAA,CACE,MAAAS,EAAA,SAAA,iBAAA,IAAAT,UAAA,EACAS,EAAA,QACEC,EAAAD,EAAA,CAAA,IAAA,MAAAC,EAAA,QAEA1C,EAAAA,6BAAAA,EAGJQ,IACA0B,EAAAA,EAAAA,EAOF,MAAA,IAAA,CACEpB,GAAU,CACZ,EAAA,CAAAuB,EAAAJ,EAAAJ,EAAAG,CAAA,CAAA,EAGFW,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEIxD,EAAA,IAAA2B,EAAA,CAAA,cAAAV,EAAA,cAAAgC,EAAA,UAAAQ,EAAAxC,EAAA+B,CAAA,EAAA,UAAAC,EAAA,QAAAP,EAAA,EAK6B1C,EAAA,IAAA2C,EAAA,CAAA,cAAAM,EAAA,UAAAQ,EAAA1C,EAAAmC,EAAAN,CAAA,EAAA,UAAAK,EAAA,GAAAS,EAAA,SAAAlB,EAAA,CAS7B,CAAA,CAAA,CAGN,EA3DA,WA6DAmB,EAAApB"}