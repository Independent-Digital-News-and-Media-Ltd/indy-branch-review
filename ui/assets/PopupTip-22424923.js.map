{"version":3,"file":"PopupTip-22424923.js","sources":["../../../src/components/PopupTip/PopupTip.tsx"],"sourcesContent":["import { useLayoutEffect, FC, useState, useRef } from 'react';\n\nimport { SIZE_SMALL } from '../Icon/Icon.constants';\n\nimport {\n  getBB,\n  calculateTriggerClass,\n  calculatePosition,\n} from './PopupTip.helpers';\nimport { StyledIcon, Wrapper, Trigger, Body } from './PopupTip.styles';\nimport { Position, PopupTipProps } from './PopupTip.types';\n\nimport infoSVG from '#icons/info-outline-16.svg';\n\n/* color of trigger inherited from containing html */\n\nexport const PopupTip: FC<PopupTipProps> = ({\n  children,\n  svg = infoSVG,\n  size = SIZE_SMALL,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [position, setPosition] = useState<Position>({ left: 0, top: 0 });\n  const [orientation, setOrientation] = useState('below');\n\n  const triggerRef = useRef(null);\n  const bodyRef = useRef(null);\n\n  useLayoutEffect(() => {\n    if (isOpen) {\n      const triggerRect = getBB(triggerRef);\n      const bodyRect = getBB(bodyRef);\n      const viewportWidth = document.documentElement.clientWidth;\n      const viewportHeight = document.documentElement.clientHeight;\n\n      const [left, top, orientation] = calculatePosition(\n        triggerRect,\n        bodyRect,\n        viewportWidth,\n        viewportHeight,\n      );\n\n      setPosition({ left, top });\n      setOrientation(orientation);\n    }\n  }, [isOpen]);\n\n  const triggerClass = calculateTriggerClass(isOpen, orientation);\n\n  function onFocus() {\n    setIsOpen(true);\n  }\n\n  function onBlur() {\n    setIsOpen(false);\n  }\n\n  function onMouseOver() {\n    setIsOpen(true);\n  }\n\n  function onMouseOut() {\n    setIsOpen(false);\n  }\n\n  return (\n    <Wrapper>\n      <Trigger\n        className={triggerClass}\n        tabIndex={0}\n        ref={triggerRef}\n        $size={size}\n        onFocus={onFocus}\n        onMouseOver={onMouseOver}\n        onMouseOut={onMouseOut}\n        onBlur={onBlur}\n      >\n        <StyledIcon svg={svg} size={size} />\n      </Trigger>\n      {isOpen && (\n        <Body\n          ref={bodyRef}\n          style={{\n            left: position.left,\n            top: position.top,\n          }}\n        >\n          {children}\n        </Body>\n      )}\n    </Wrapper>\n  );\n};\n"],"names":["PopupTip","__name","children","infoSVG","isOpen","setIsOpen","useState","position","setPosition","orientation","setOrientation","triggerRef","useRef","bodyRef","useLayoutEffect","triggerRect","getBB","bodyRect","viewportWidth","viewportHeight","left","top","orientation2","calculatePosition","triggerClass","calculateTriggerClass","onFocus","onBlur","onMouseOver","onMouseOut","jsxs","Wrapper","jsx","Trigger","size","StyledIcon","svg","Body"],"mappings":"4VAgBO,MAAAA,EAAAC,EAAA,CAAA,CAAqC,SAAAC,EAC1CA,IAAAA,EAAAA,EACMC,KAAAA,EAAAA,CAER,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,WAAA,CAAmD,KAAA,EAAQ,IAAA,CAAQ,CAAA,EACnE,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,SAAA,OAAA,EAEAK,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,IAAA,EAEAE,EAAAA,gBAAAA,IAAAA,CACE,GAAAV,EAAA,CACE,MAAAW,EAAAC,EAAAL,CAAA,EACAM,EAAAD,EAAAH,CAAA,EACAK,EAAA,SAAA,gBAAA,YACAC,EAAA,SAAA,gBAAA,aAEA,CAAAC,EAAAC,EAAAC,CAAA,EAAAC,EAAAR,EAAAE,EAAAC,EAAAC,CAAA,EAOAX,EAAAA,CAAY,KAAAY,EAAEA,IAAAA,CAAMC,CAAAA,EACpBX,EAAAA,CAAAA,EACF,EAAA,CAAAN,CAAA,CAAA,EAGF,MAAAoB,EAAAC,EAAArB,EAAAK,CAAA,EAEA,SAAAiB,GAAA,CACErB,EAAAA,EAAAA,CAAc,CADhBJ,EAAAyB,EAAA,WAIA,SAAAC,GAAA,CACEtB,EAAAA,EAAAA,CAAe,CADjBJ,EAAA0B,EAAA,UAIA,SAAAC,GAAA,CACEvB,EAAAA,EAAAA,CAAc,CADhBJ,EAAA2B,EAAA,eAIA,SAAAC,GAAA,CACExB,EAAAA,EAAAA,CAAe,CADjB,OAAAJ,EAAA4B,EAAA,cAIAC,EAAA,KAAAC,EAAA,CAAA,SAAA,CAEIC,MAAAC,EAAA,CAAA,UAAAT,EAAA,SAAA,EAAA,IAAAb,EAAA,MAAAuB,EAAA,QAAAR,EAAA,YAAAE,EAAA,WAAAC,EAAA,OAAAF,EAAA,SAAAK,EAAAA,IAAAG,EAAA,CAAA,IAAAC,EAAA,KAAAF,CAAA,CAAA,EAAA,EAWA9B,GAAA4B,EAAA,IAAAK,EAAA,CAAA,IAAAxB,EAAA,MAAA,CAIW,KAAAN,EAAA,KACUa,IAAAA,EAAAA,GACDC,EAAAA,SAAAA,CAAAA,CAAAA,CAIlB,CAAA,CAAA,CAIR,EA5EO"}