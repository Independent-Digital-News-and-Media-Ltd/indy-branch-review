var E=Object.defineProperty;var n=(e,r)=>E(e,"name",{value:r,configurable:!0});import{j as a}from"./jsx-runtime-91e341d4.js";import{r as w}from"./index-b56a0300.js";import{g as v,I as T,B as q,b as S,d as V}from"./InputWrapper-91d5dced.js";import{u as m}from"./styled-components.browser.esm-dd68fb2f.js";const D=m(q).withConfig({componentId:"sc-1vpezd8-0"})(["",""],({theme:e,$hasButton:r})=>r?`padding-right: ${e.dimension.btn.height}px`:""),B=m.div.withConfig({componentId:"sc-1vpezd8-1"})(["position:absolute;top:0;right:0;border-radius:var(--border-radius);outline:none;&:focus-within{outline:",";}"],({theme:e})=>v(e,T.DEFAULT,"focused")),c={Enter:"Enter",Space:" ",Tab:"Tab"},F={Left:0},s=n(e=>({onMouseDown:n(t=>{t.preventDefault(),t.button===F.Left&&e()},"onMouseDown"),onKeyDown:n(t=>{(t.key===c.Enter||t.key===c.Space)&&(t.preventDefault(),e())},"onKeyDown")}),"useInputButton");try{s.displayName="useInputButton",s.__docgenInfo={description:"",displayName:"useInputButton",props:{}}}catch{}const i=n(({id:e,label:r,helpText:u,className:t,message:f,type:h="text",state:y,button:o,buttonAction:l,controlled:d=!0,required:g=!1,...b})=>{const p=S();if(d&&!p)throw new Error("FormInputs should be wrapped by a FormProvider from @indy/ui/Form, unless the controlled={false} prop is set");const I=d?p.register(e):{},x=s(n(()=>{l&&l()},"onAction")),_=n(()=>o?w.cloneElement(o,x):null,"createInputButton");return a.jsxs(V,{id:e,label:r,helpText:u,required:g,state:y,message:f,className:t,children:[a.jsx(D,{id:e,type:h,$hasButton:!!o,...b,...I}),o&&a.jsx(B,{children:_()})]})},"TextInput"),N=i;try{i.displayName="TextInput",i.__docgenInfo={description:"",displayName:"TextInput",props:{button:{defaultValue:null,description:`A button that renders inside of the input. This button should not include
an onClick event - the action should be passed as a buttonAction instead`,name:"button",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},buttonAction:{defaultValue:null,description:`An action that is to be performed onClick or on Space/Enter keypress
and will be optimised for accessibility`,name:"buttonAction",required:!1,type:{name:"VoidFunction"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},label:{defaultValue:null,description:"Style guide: Text fields should always have a label",name:"label",required:!0,type:{name:"string"}},helpText:{defaultValue:null,description:"Style guide: Input constraints can be displayed here e.g. for Expiry Date: MM/YY",name:"helpText",required:!1,type:{name:"string"}},message:{defaultValue:null,description:`When controlled={true}, the message that will display on error
Otherwise, the state must be manually set to InputState.ERROR`,name:"message",required:!1,type:{name:"string"}},state:{defaultValue:null,description:`The state of the input - defines border style, and whether to show
error messages`,name:"state",required:!0,type:{name:"enum",value:[{value:'"default"'},{value:'"error"'},{value:'"success"'}]}},required:{defaultValue:{value:"false"},description:`Whether to display the asterisk indicating a required field
Note: This is purely a VISUAL indicator, and does not affect validation`,name:"required",required:!1,type:{name:"boolean"}},controlled:{defaultValue:{value:"true"},description:`Whether the input's validation (errors and state) are controlled by
react-hook-form (requiring use of FormProvider from
@indy /ui/Form)`,name:"controlled",required:!1,type:{name:"boolean"}}}}}catch{}export{N as T};
//# sourceMappingURL=TextInput-8f400c3a.js.map
