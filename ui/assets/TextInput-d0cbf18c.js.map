{"version":3,"file":"TextInput-d0cbf18c.js","sources":["../../../src/components/Form/Input/TextInput/TextInput.styles.ts","../../../src/hooks/useInputButton.tsx","../../../src/components/Form/Input/TextInput/TextInput.tsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nimport { BaseInput, getBorderStyle } from '../Input.styles';\nimport { InputState, StyledInputProps } from '../Input.types';\n\nexport const Input = styled(BaseInput)<StyledInputProps>`\n  /**\n   * We need to make space for the input button if it exists,\n   * to prevent input text overlapping the button\n  */\n  ${({ theme, $hasButton }) => {\n    if ($hasButton) {\n      return `padding-right: ${theme.dimension.btn.height}px`;\n    }\n\n    return '';\n  }}\n`;\n\nexport const InputButton = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  border-radius: var(--border-radius);\n  outline: none;\n\n  &:focus-within {\n    outline: ${({ theme }) =>\n      getBorderStyle(theme, InputState.DEFAULT, 'focused')};\n  }\n`;\n","const KEY_CODES = {\n  Enter: 'Enter',\n  Space: ' ',\n  Tab: 'Tab',\n};\n\nconst MOUSE_CODES = {\n  Left: 0,\n};\n\n/*\n * Hook to return to add interactivity to an input button\n * (e.g. show/hide password button) without interrupting default\n * focus and tabbing behaviour\n *\n * Used in the TextInput component and utilised by PasswordInput\n *\n */\nconst useInputButton = (action: VoidFunction) => {\n  // NOTE: We use onMouseDown instead of onClick to prevent\n  // inputs from losing focus when the button is clicked\n  const onMouseDown = (evt: MouseEvent) => {\n    // Prevent focus from being taken away from the input\n    evt.preventDefault();\n\n    if (evt.button === MOUSE_CODES.Left) {\n      action();\n    }\n  };\n\n  const onKeyDown = (evt: KeyboardEvent) => {\n    if (evt.key === KEY_CODES.Enter || evt.key === KEY_CODES.Space) {\n      // Prevent space being added to the input value\n      // NOTE: This needs to happen *inside* the if statement so we\n      // don't interrupt default tabbing behaviour\n      evt.preventDefault();\n      action();\n    }\n  };\n\n  return { onMouseDown, onKeyDown };\n};\n\nexport default useInputButton;\n","import React, { cloneElement } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport FormInputWrapper from '../InputWrapper';\n\nimport { Input, InputButton } from './TextInput.styles';\nimport { TextInputProps } from './TextInput.types';\n\nimport useInputButton from '#hooks/useInputButton';\n\nconst TextInput: React.FC<TextInputProps> = ({\n  id,\n  label,\n  helpText,\n  className,\n  message,\n  type = 'text',\n  state,\n  button,\n  buttonAction,\n  controlled = true,\n  required = false,\n  ...inputProps\n}) => {\n  const form = useFormContext();\n\n  if (controlled && !form) {\n    throw new Error(\n      `FormInputs should be wrapped by a FormProvider from @indy/ui/Form, unless the controlled={false} prop is set`,\n    );\n  }\n\n  // Check for context so we can use this input as a\n  // standalone component without react-hook-form\n  const inputRegistration = controlled ? form.register(id) : {};\n\n  const onAction = () => {\n    buttonAction && buttonAction();\n  };\n\n  const buttonProps = useInputButton(onAction);\n\n  const createInputButton = () =>\n    button ? cloneElement(button, buttonProps) : null;\n\n  return (\n    <FormInputWrapper\n      id={id}\n      label={label}\n      helpText={helpText}\n      required={required}\n      state={state}\n      message={message}\n      className={className}\n    >\n      <Input\n        id={id}\n        type={type}\n        $hasButton={!!button}\n        {...inputProps}\n        {...inputRegistration}\n      ></Input>\n      {button && <InputButton>{createInputButton()}</InputButton>}\n    </FormInputWrapper>\n  );\n};\n\nexport default TextInput;\n"],"names":["Input","styled","BaseInput","withConfig","componentId","theme","$hasButton","dimension","btn","height","InputButton","div","getBorderStyle","InputState","DEFAULT","KEY_CODES","MOUSE_CODES","useInputButton","__name","action","evt","onMouseDown","onKeyDown","TextInput","id","label","helpText","className","message","state","button","buttonAction","required","inputProps","form","useFormContext","controlled","inputRegistration","buttonProps","createInputButton","cloneElement","jsxs","FormInputWrapper","jsx","type","TextInput$1"],"mappings":"gTAKO,MAAMA,EAAQC,EAAOC,CAAS,EAACC,WAAA,CAAAC,YAAA,cAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAKlC,CAAC,CAAEC,MAAAA,EAAOC,WAAAA,CAAW,IACjBA,EACM,kBAAiBD,EAAME,UAAUC,IAAIC,WAGxC,EACR,EAGUC,EAAcT,EAAOU,IAAGR,WAAA,CAAAC,YAAA,cAAA,CAAA,EAAA,CAAA,0GAAA,IAAA,EAQtB,CAAC,CAAEC,MAAAA,CAAM,IAClBO,EAAeP,EAAOQ,EAAWC,QAAS,SAAS,CAAC,EC5B1DC,EAAA,CAAkB,MAAA,QACT,MAAA,IACA,IAAA,KAET,EAEAC,EAAA,CAAoB,KAAA,CAEpB,EAUAC,EAAAC,EAAAC,IAsBE,CAAO,YAnBPD,EAAAE,GAAA,CAEEA,EAAAA,eAAAA,EAEAA,EAAA,SAAAJ,EAAA,MACEG,GACF,EANF,eAmBSE,UAVTH,EAAAE,GAAA,EACEA,EAAA,MAAAL,EAAA,OAAAK,EAAA,MAAAL,EAAA,SAIEK,EAAAA,eAAAA,EACAD,IACF,EAPF,YAUsBG,GAtBxB,kICRA,MAAAC,EAAAL,EAAA,CAAA,CAA6C,GAAAM,EAC3CA,MAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,KAAAA,EAAAA,OACO,MAAAC,EACPA,OAAAA,EACAC,aAAAA,EACAC,WAAAA,EAAAA,GACa,SAAAC,EAAA,GACF,GAAAC,CAEb,IAAA,CACE,MAAAC,EAAAC,IAEA,GAAAC,GAAA,CAAAF,EACE,MAAA,IAAA,MAAA,8GAAA,EAOF,MAAAG,EAAAD,EAAAF,EAAA,SAAAV,CAAA,EAAA,GAMAc,EAAArB,EAJAC,EAAA,IAAA,CACEa,GAAAA,EAAAA,CAA6B,EAD/B,WAIA,EAEAQ,EAAArB,EAAA,IAAAY,EAAAU,EAAAA,aAAAV,EAAAQ,CAAA,EAAA,KAAA,qBAGA,OAAAG,OAAAC,EAAA,CAAA,GAAAlB,EAAA,MAAAC,EAAA,SAAAC,EAAA,SAAAM,EAAA,MAAAH,EAAA,QAAAD,EAAA,UAAAD,EAAA,SAAA,CAUIgB,EAAAA,IAAA3C,EAAA,CAAA,GAAAwB,EAAA,KAAAoB,EAAA,WAAA,CAAA,CAAAd,EAAA,GAAAG,EAAA,GAAAI,CAAA,CAAA,EAMCP,GAAAa,EAAA,IAAAjC,EAAA,CAAA,SAAA6B,EAAA,CAAA,CAAA,CAC4C,CAAA,CAAA,CAGnD,EAvDA,aAyDAM,EAAAtB;;;;;;;"}