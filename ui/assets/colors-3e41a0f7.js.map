{"version":3,"file":"colors-3e41a0f7.js","sources":["../../../src/utils/chunkString.ts","../../../src/utils/colors.ts"],"sourcesContent":["const chunkString = (str: string, size: number): string[] =>\n  str.split('').reduce((acc: string[], char: string, i: number) => {\n    const chunkIndex = Math.floor(i / size);\n    acc[chunkIndex] = acc[chunkIndex] ? acc[chunkIndex].concat(char) : char;\n    return acc;\n  }, []);\n\nexport default chunkString;\n","import chunkString from './chunkString';\n\n/**\n * Extracts the RGB values from a hex color\n * @param hex The hex value to extract the RGB values from\n * @returns An array of RGB values\n */\nexport const extractRGB = (hex: string = '#000000') => {\n  const cleanHex = hex.replace('#', '');\n  const chunkSize = cleanHex.length === 3 ? 1 : 2;\n  const rgb = chunkString(cleanHex, chunkSize);\n\n  return rgb.map((x) => parseInt(x, 16));\n};\n\n/**\n * Validates a hex color code\n * @param hex The hex value to validate\n * @returns True if the hex value is valid, false otherwise\n */\nexport const isValidHex = (hex: string) => {\n  const hexRegex = /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$/;\n  return hexRegex.test(hex);\n};\n\n/**\n * Converts a hex color to rgba\n * @param hex The hex value to convert to rgba\n * @param alpha The alpha value to use\n * @param asFunction Whether or not to return the rgba as a function\n * @returns The rgba value in the form '{r} {g} {b} {alpha}' or\n * 'rgba({r}, {g}, {b}, {alpha})\n */\nexport function hex2rgba(hex: string, alpha = 1, asFunction = true) {\n  if (!isValidHex(hex)) {\n    throw new Error(`invalid hex color: ${hex}`);\n  }\n\n  try {\n    const [r, g, b] = extractRGB(hex);\n\n    if (asFunction) {\n      return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n\n    if (alpha < 1) {\n      return `${r} ${g} ${b} ${alpha}`;\n    }\n\n    return `${r} ${g} ${b}`;\n  } catch {\n    throw new Error(`could not parse hex color: ${hex}`);\n  }\n}\n\nexport function getLuma(value: string) {\n  const [r, g, b] = extractRGB(value);\n\n  if (!r || !g || !b) {\n    return null;\n  }\n\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n"],"names":["chunkString","str","size","split","reduce","acc","char","i","chunkIndex","Math","floor","concat","extractRGB","hex","cleanHex","replace","chunkSize","length","map","x","parseInt","isValidHex","test","hex2rgba","alpha","asFunction","Error","r","g","b","getLuma","value"],"mappings":"+EAAA,MAAMA,EAAcA,EAAAA,CAACC,EAAaC,IAChCD,EAAIE,MAAM,EAAE,EAAEC,OAAO,CAACC,EAAeC,EAAcC,IAAc,CAC/D,MAAMC,EAAaC,KAAKC,MAAMH,EAAIL,CAAI,EAClCM,OAAAA,EAAAA,CAAU,EAAIH,EAAIG,CAAU,EAAIH,EAAIG,CAAU,EAAEG,OAAOL,CAAI,EAAIA,EAC5DD,CACT,EAAG,EAAE,EALaL,eCOPY,EAAaA,EAAAA,CAACC,EAAc,YAAc,CACrD,MAAMC,EAAWD,EAAIE,QAAQ,IAAK,EAAE,EAC9BC,EAAYF,EAASG,SAAW,EAAI,EAAI,EAG9C,OAFYjB,EAAYc,EAAUE,CAAS,EAEhCE,IAAKC,GAAMC,SAASD,EAAG,EAAE,CAAC,CACvC,EAN0BP,cAabS,EAAaA,EAACR,GACR,qCACDS,KAAKT,CAAG,EAFAQ,cAanB,SAASE,EAASV,EAAaW,EAAQ,EAAGC,EAAa,GAAM,CAC9D,GAAA,CAACJ,EAAWR,CAAG,EACX,MAAA,IAAIa,MAAO,sBAAqBb,GAAK,EAGzC,GAAA,CACF,KAAM,CAACc,EAAGC,EAAGC,CAAC,EAAIjB,EAAWC,CAAG,EAEhC,OAAIY,EACM,QAAOE,MAAMC,MAAMC,MAAML,KAG/BA,EAAQ,EACF,GAAEG,KAAKC,KAAKC,KAAKL,IAGnB,GAAEG,KAAKC,KAAKC,GAAAA,MACpB,CACM,MAAA,IAAIH,MAAO,8BAA6Bb,GAAK,CACrD,CACF,CApBgBU,EAAAA,EAAAA,YAsBT,SAASO,EAAQC,EAAe,CACrC,KAAM,CAACJ,EAAGC,EAAGC,CAAC,EAAIjB,EAAWmB,CAAK,EAElC,MAAI,CAACJ,GAAK,CAACC,GAAK,CAACC,EACR,KAGF,MAASF,EAAI,MAASC,EAAI,MAASC,CAC5C,CARgBC,EAAAA,EAAAA"}