{"version":3,"file":"devices-6d2491cf.js","sources":["../../../src/theme/breakPoints.ts","../../../src/utils/upperFirst.ts","../../../src/utils/mediaQueries.ts","../../../src/theme/devices.ts"],"sourcesContent":["/**\n * Be careful adding or editing these values as they are tightly coupled with\n * the design system.\n */\n\nexport const mobile = 360;\nexport const tablet = 768;\nexport const laptop = 1000;\nexport const desktop = 1250;\n","/**\n * Capitalizes the first letter of a string.\n * @param str - The input string.\n * @returns The string with the first letter capitalized.\n */\n\nfunction upperFirst(str: string) {\n  return str ? str.charAt(0).toUpperCase() + str.slice(1) : '';\n}\n\nexport default upperFirst;\n","import upperFirst from './upperFirst';\n\nconst handleError = (property: string, minValue: number) => {\n  throw new Error(\n    `Value for ${property} must be greater or equal to ${minValue}`,\n  );\n};\n\nfunction minHeight(val: number) {\n  val < 1 && handleError('minHight', 1);\n\n  return `(min-height: ${val}px)`;\n}\n\nfunction minWidth(val: number) {\n  val < 1 && handleError('minWidth', 1);\n\n  return `(min-width: ${val}px)`;\n}\n\nfunction maxWidth(val: number) {\n  val < 2 && handleError('maxWidth', 2);\n\n  return `(max-width: ${val - 1}px)`;\n}\n\n/**\n * Sorts an object of devices based on their width values in ascending order.\n *\n * @param {Object} devices - An object containing device names as keys and corresponding width values as values.\n * @returns {Array} An array of key-value pairs representing devices, sorted in ascending order based on width.\n */\nfunction sortSizesAscending(devices: { [str: string]: number }) {\n  return Object.entries(devices).sort(([, widthA], [, widthB]) =>\n    widthA > widthB ? 1 : -1,\n  );\n}\n\n/**\n *\n * @param {object} breakPoints Key/value pairs of named breakpoints and widths\n * @returns Media query rules based on the breakpoint e.g.\n *   {\n *     deviceName: '(min-width: 100px)',\n *     maxDeviceName: '(max-width: 99px)',\n *     onlyDeviceName: '(min-width: 100px) and (max-width: 199px)',\n *     ...\n *   }\n */\nfunction generateMediaQueryRules(devices: { [str: string]: number }): {\n  [key: string]: string;\n} {\n  const sortedDevices = sortSizesAscending(devices);\n  return sortedDevices.reduce((acc, [name, width], i, arr) => {\n    const next = arr[i + 1];\n    const from = minWidth(width);\n    const to = next && maxWidth(next[1]);\n    const max = maxWidth(width);\n\n    if (next && width === next[1]) {\n      throw new Error(\n        `Duplicate width value of ${width} detected for ${name} and ${next[0]}`,\n      );\n    }\n\n    acc = {\n      ...acc,\n      [name]: from,\n      [`max${upperFirst(name)}`]: max,\n      [`only${upperFirst(name)}`]: next ? `${from} and ${to}` : from,\n    };\n\n    return acc;\n  }, {});\n}\n\nexport {\n  minHeight,\n  minWidth,\n  maxWidth,\n  sortSizesAscending,\n  generateMediaQueryRules,\n};\n","import {\n  mobile as mobileBreakpoint,\n  tablet as tabletBreakpoint,\n  laptop as laptopBreakpoint,\n  desktop as desktopBreakpoint,\n} from '#theme/breakPoints';\n\nimport { generateMediaQueryRules } from '#utils/mediaQueries';\n\n// prettier-ignore\nconst mediaQueryRules = generateMediaQueryRules({\n  mobile:  mobileBreakpoint,\n  tablet:  tabletBreakpoint,\n  laptop:  laptopBreakpoint,\n  desktop: desktopBreakpoint,\n});\n\n// prettier-ignore\nexport const {\n  mobile,  maxMobile,  onlyMobile,\n  tablet,  maxTablet,  onlyTablet,\n  laptop,  maxLaptop,  onlyLaptop,\n  desktop, maxDesktop, onlyDesktop,\n} = mediaQueryRules;\n"],"names":["mobile","tablet","laptop","desktop","upperFirst","str","charAt","toUpperCase","slice","handleError","property","minValue","Error","minWidth","val","maxWidth","sortSizesAscending","devices","Object","entries","sort","widthA","widthB","generateMediaQueryRules","sortedDevices","reduce","acc","name","width","i","arr","next","from","to","max","mediaQueryRules","mobileBreakpoint","tabletBreakpoint","laptopBreakpoint","desktopBreakpoint","maxMobile","onlyMobile","maxTablet","onlyTablet","maxLaptop","onlyLaptop","maxDesktop","onlyDesktop"],"mappings":"+EAKO,MAAMA,EAAS,IACTC,EAAS,IACTC,EAAS,IACTC,EAAU,KCFvB,SAASC,EAAWC,EAAa,CACxBA,OAAAA,EAAMA,EAAIC,OAAO,CAAC,EAAEC,YAAgBF,EAAAA,EAAIG,MAAM,CAAC,EAAI,EAC5D,CAFSJ,EAAAA,EAAAA,cCJT,MAAMK,EAAcA,EAAAA,CAACC,EAAkBC,IAAqB,CAC1D,MAAM,IAAIC,MACP,aAAYF,iCAAwCC,GACvD,CACF,EAJoBF,eAYpB,SAASI,EAASC,EAAa,CACvB,OAAAA,EAAA,GAAKL,EAAY,WAAY,CAAC,EAE5B,eAAcK,MACxB,CAJSD,EAAAA,EAAAA,YAMT,SAASE,EAASD,EAAa,CACvB,OAAAA,EAAA,GAAKL,EAAY,WAAY,CAAC,EAE5B,eAAcK,EAAM,MAC9B,CAJSC,EAAAA,EAAAA,YAYT,SAASC,EAAmBC,EAAoC,CAC9D,OAAOC,OAAOC,QAAQF,CAAO,EAAEG,KAAK,CAAC,CAAA,CAAGC,CAAM,EAAG,CAAA,CAAGC,CAAM,IACxDD,EAASC,EAAS,EAAI,EACxB,CACF,CAJSN,EAAAA,EAAAA,sBAiBT,SAASO,EAAwBN,EAE/B,CAEOO,OADeR,EAAmBC,CAAO,EAC3BQ,OAAO,CAACC,EAAK,CAACC,EAAMC,CAAK,EAAGC,EAAGC,IAAQ,CACpDC,MAAAA,EAAOD,EAAID,EAAI,CAAC,EAChBG,EAAOnB,EAASe,CAAK,EACrBK,EAAKF,GAAQhB,EAASgB,EAAK,CAAC,CAAC,EAC7BG,EAAMnB,EAASa,CAAK,EAE1B,GAAIG,GAAQH,IAAUG,EAAK,CAAC,EAC1B,MAAM,IAAInB,MACP,4BAA2BgB,kBAAsBD,SAAYI,EAAK,CAAC,GACtE,EAGI,OAAAL,EAAA,CACJ,GAAGA,EACH,CAACC,CAAI,EAAGK,EACR,CAAE,MAAK5B,EAAWuB,CAAI,GAAG,EAAGO,EAC5B,CAAE,OAAM9B,EAAWuB,CAAI,GAAG,EAAGI,EAAQ,GAAEC,SAAYC,IAAOD,CAAAA,EAGrDN,CACT,EAAG,CAAE,CAAA,CACP,CAzBSH,EAAAA,EAAAA,2BCvCT,MAAMY,EAAkBZ,EAAwB,CAC9CvB,OAASoC,IACTnC,OAASoC,IACTnC,OAASoC,IACTnC,QAASoC,IACX,CAAC,EAGY,CACXvC,OAAAA,EAASwC,UAAAA,EAAYC,WAAAA,EACrBxC,OAAAA,EAASyC,UAAAA,EAAYC,WAAAA,EACrBzC,OAAAA,EAAS0C,UAAAA,EAAYC,WAAAA,EACrB1C,QAAAA,EAAS2C,WAAAA,EAAYC,YAAAA,CACvB,EAAIZ"}