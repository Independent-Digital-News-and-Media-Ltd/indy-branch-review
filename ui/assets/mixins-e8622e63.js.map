{"version":3,"file":"mixins-e8622e63.js","sources":["../../../src/theme/mixins.ts"],"sourcesContent":["import { RuleSet, css } from 'styled-components';\n\nimport * as device from '#theme/devices';\n\n/**\n * CSS to fully hide elements of the page\n */\nconst hidden = css`\n  display: none;\n`;\n\n/**\n * CSS to visually hide semantically necessary elements of the page\n */\nconst visuallyHidden = css`\n  position: absolute;\n  overflow: hidden;\n  width: 0.01em;\n  height: 0.01em;\n  padding: 0;\n  border: none;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n`;\n\n/**\n * CSS to apply an ellipsis to text that overflows its container\n */\nexport const truncate = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\n/**\n * Wraps provided declarations in a media query given a feature\n * @param {string} feature Feature to match against\n * @param {string} declarations CSS declarations to apply\n * @returns {string} CSS containing declarations wrapped in a media query\n */\nfunction mq(feature: string, declarations: RuleSet<object>) {\n  if (!Object.values(device).includes(feature)) {\n    console.warn(`No such feature: \"${feature}\"`);\n    return null;\n  }\n\n  return css`\n    @media ${feature} {\n      ${declarations}\n    }\n  `;\n}\n\n/**\n * Returns CSS required to hide an element on the page\n * @param {string} [feature] Feature to match against to hide elements\n * @returns {string} CSS containing declarations wrapped in a media query\n */\nfunction hiddenOn(feature: string) {\n  return mq(feature, hidden);\n}\n\n/**\n * Returns CSS required to visually hide an element on the page\n * @param {string} [feature] Feature to match against to hide elements\n * @returns {string} CSS containing declarations wrapped in a media query\n */\nfunction visuallyHiddenOn(feature: string) {\n  return mq(feature, visuallyHidden);\n}\n\nconst customScrollbar = css`\n  --scroll-thumb-width: 4px;\n  --scroll-track-width: 0;\n  --scroll-track-bg: ${(props) => props.theme.color.canvas.base};\n  --scroll-thumb-bg: ${(props) => props.theme.color.ink.base};\n\n  @media ${device.tablet} {\n    --scroll-track-width: 16px;\n  }\n\n  &::-webkit-scrollbar {\n    width: var(--scroll-width);\n  }\n\n  &::-webkit-scrollbar-track {\n    background: var(--scroll-track-bg);\n  }\n\n  &::-webkit-scrollbar-thumb {\n    border: solid var(--scroll-track-bg);\n    border-width: 0\n      calc((var(--scroll-track-width) - var(--scroll-thumb-width)) / 2);\n    border-radius: 2px;\n    background: var(--scroll-thumb-bg);\n\n    &:hover {\n      border-width: 0;\n    }\n  }\n`;\n\n/**\n * CSS to hide scrollbars across different browsers.\n * Note: This does not prevent scrolling, only hides the scrollbar UI.\n */\nconst hideScrollbar = css`\n  /* Hide scrollbar for Firefox */\n  scrollbar-width: none;\n\n  /* Hide scrollbar for Chrome, Safari and Opera */\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport {\n  hidden,\n  visuallyHidden,\n  mq,\n  hiddenOn,\n  visuallyHiddenOn,\n  customScrollbar,\n  hideScrollbar,\n};\n"],"names":["css","visuallyHidden","truncate","customScrollbar","props","theme","color","canvas","base","ink","device","hideScrollbar"],"mappings":"0GAOeA,EAEd,CAAA,eAAA,CAAA,EAKD,MAAMC,EAAiBD,EAStB,CAAA,2HAAA,CAAA,EAKYE,EAAWF,EAIvB,CAAA,4DAAA,CAAA,EAuCKG,EAAkBH,EAAG,CAAA,qEAAA,sBAAA,WAAA,yWAAA,EAGOI,GAAAA,EAAMC,MAAMC,MAAMC,OAAOC,KACzBJ,GAAAA,EAAMC,MAAMC,MAAMG,IAAID,KAE7CE,CAAa,EA6BlBC,EAAgBX,EAQrB,CAAA,0DAAA,CAAA"}